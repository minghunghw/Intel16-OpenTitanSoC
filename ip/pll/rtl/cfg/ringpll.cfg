#!/usr/intel/bin/perl
#####################################################################
# <dut>.cfg
#
# This Perl module is used to configure the build for this particular
# DUT.
#
# Standard configuration includes setting up the target dir for the
# DUT, specifying any template files that should be used to generate
# ACE related config files (.env, .acerc, etc) and netbatch settings
# for runtools.
# All configuration information is stored either in the %DutConfig hash
# or in the %ToolConfig hash for the corresponding tool
#
# The data is accessed by Flowbee, a subtool of simbuild
# For more information on DutConfig, and how to configure it,
# please see
#
# This file stores the configuration information for building
# the RTL simulator and CTE, etc.
#
# Intel Confidential
#
# Archive information:
#       $Date: $
#       $Revision: $
#
####################################################################

#####################################################################
# Please do not modify any code in this section
#####################################################################
package DutConfig;

use strict;
use vars qw(@ISA @EXPORT %DutConfig $simbuild_mode);
use Exporter ();
@ISA    = qw(Exporter);
@EXPORT = qw(%DutConfig);

use RTLUtils;

# Set default values for paths
#
my $MODEL_ROOT = exists $ENV{MODEL_ROOT} ? $ENV{MODEL_ROOT} : "";

#####################################################################
# BuildCfg hash stores the configuration information
# You can modify values as needed
#
# Note that quotes in hash entries need to be escaped with '\'
#
# The compulsory %DutConfig hash entr(y|ies) is|are as follow(s):
#
#
# target      : This is the dut name that will also serve as the name
#               of the sub directory under target where all collateral
#               related to this dut will be generated.
#
# scope       : This is the name of the Ace scope corresponding to this
#               dut. If not defined, the scope will be the same as dut
#
# model       : This is the name of the default Ace simulation model
#               If not overridden, the model will be the same as the scope
#
# modelTop    : This is the name of the elaboration top for simulation
#               If not overridden in this file, the modelTop will be 
#               <scope>_tb_lib.<scope>_tb_top 
#####################################################################
my $dut_name = 'ringpll';

ToolConfig::set_facet('dut' => $dut_name);

# Set CLUSTER_NAME
$ENV{CLUSTER_NAME} = ${dut_name};
$ENV{DUT}          = ${dut_name};
$ENV{COLLAGE_WORK} = "$MODEL_ROOT/target/${dut_name}/collage_work";

$DutConfig{target} = ${dut_name};
# Check if scope is a valid facet and get its value
# if not, use the dut name as the default scope name
$DutConfig{scope} = ToolConfig::facet_exists('scope') ? ToolConfig::get_facet('scope') : ${dut_name};
$DutConfig{model} = "$DutConfig{scope}_tb";
$DutConfig{modelTop} = "$DutConfig{scope}_tb_lib.$DutConfig{scope}_tb";

## enable rtldebug to find target
$ToolConfig::ToolConfig_tools{ace_setup}{ENV}{ACE_PWA_DIR} = "target/$DutConfig{target}";
## For trex to find the right mcrd
$ToolConfig::ToolConfig_tools{ace}{OTHER}{results} = "$ENV{MODEL_ROOT}/target/$DutConfig{target}/results/sim";

# simBuildArgs
# can be used to turn on/off stages selectively for a specific dut (use simbuild.smap or default_active setting in FlowSpec if this is common across all DUTs
# Also can be used to pass options to stages/subflows for a specific DUT
# For e.g, testname option to static_checks flow
$DutConfig{simBuildArgs} = "";
$DutConfig{simBuildArgs} .= " -static_checks_args -testname ringpll -static_checks_args-";
$DutConfig{simBuildArgs} .= " -fv_args -testname fv/ringpll -fv_args-";


# NB for builds
#$ToolConfig::general_vars{NBCLASS} = $ToolConfig::general_vars{NBCLASS_LARGE};
$DutConfig{NBCLASS} = $ToolConfig::general_vars{NBCLASS};
$DutConfig{NBPOOL}  = $ToolConfig::general_vars{NBPOOL};
$DutConfig{NBQSLOT} = $ToolConfig::general_vars{NBQSLOT};


# Ace specific template file configuration
# UDF files generated per dut/scope
$ToolConfig::ToolConfig_tools{ace}{OTHER}{ace_udf_templates}{"cfg/$DutConfig{target}/$DutConfig{scope}.udf"} =
    $ENV{MODEL_ROOT}."/cfg/templates/scope.udf.template";
$ToolConfig::ToolConfig_tools{ace}{OTHER}{ace_udf_templates}{"cfg/$DutConfig{target}/$DutConfig{scope}_integ.udf"} =
    $ENV{MODEL_ROOT}."/cfg/templates/scope_integ.udf.template";
$ToolConfig::ToolConfig_tools{ace}{OTHER}{ace_udf_templates}{"cfg/$DutConfig{target}/$DutConfig{scope}_local_ivars.udf"} =
    $ENV{MODEL_ROOT}."/cfg/templates/scope_local_ivars.udf.template";
$ToolConfig::ToolConfig_tools{ace}{OTHER}{ace_udf_templates}{"cfg/$DutConfig{target}/$DutConfig{scope}_hdl.udf"} =
    $ENV{MODEL_ROOT}."/cfg/templates/scope_hdl.udf.template";

######################################################################
# Do not remove the following 1
######################################################################
1;

######################################################################
#   T H E   E N D
######################################################################
