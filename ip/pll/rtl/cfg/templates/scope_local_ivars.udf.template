# -*-perl-*-
## this file generated by ACE_UTILS from the perl template: /p/hdk/rtl/proj_tools/rtltools_flows/xhdk74/17.04.03/templates/cfg/common/scope_local_ivars.udf.template

my $PROJECT = "{.$DutConfig{scope}.}"; 

use lib "$ENV{RTL_PROJ_BIN}/perllib";
use ToolConfig();

%audf = ();
########################################################################
# Includes
# - this is used to load additional settings AFTER this file is processed
########################################################################
$audf{Includes} = [# for now, only use native Ace tags and filters
                   #'cfg/common/tools.hdk.local_ivars.udf', ## contains tag and filter settings
                   #'cfg/common/tools.emulation.local_ivars.udf',
                   #'cfg/common/tools.fpga.local_ivars.udf',
                    'cfg/common/tools.visa.local_ivars.udf',
                    'cfg/common/effmcheck.udf',
    ];
    
########################################################################
# HDLSpec
########################################################################

########################################################################
# HDLSpec -> -hdl_compiler
#   - this is used to set tool-specific compiler options
#     (used anytime ace runs that compiler)
########################################################################
$audf{HDLSpec}{-hdl_compiler}{cdc} = { 
    -vcomToolArgs   => "-source".## ace 2.02.01 default options
        ## Now add any other options that need to be tool-global
        "",
    -vlogToolArgs   => "".## ace 2.02.01 default options
        "-mfcu -mixedansiports -permissive -convertallparams -synthprefix ".
        "-nopsl -suppress 7033 -suppress 3838 -suppress 2902 -skipsynthoffregion -sv ".#-suppress 12003". 
        ## Now add any other options that need to be tool-global
        " -oldsv +libext+.sv+.v+.vs -warning 2367 -warning 12003 -warning 8602 ".
        #" -sverilog ". ## a lot of IPs depend upon this, but it is not allowed to be passed to others?
        " +define+INTEL_SVA_OFF +define+INTEL_NO_PWR_PINS +define+INTEL_QUESTACDC_BUG".
        ' +define+functional '.

        ' ',
}; #cdc -hdl_compiler options

$audf{HDLSpec}{-hdl_compiler}{debussy} = {
    -vcomToolArgs   => "-onfatalerrorcontinue -stdout". ## ace 2.02.01 default options
        ## Now add any other options that should be tool-global vcom_opts
        " ",
    -vlogToolArgs   => "-stdout +systemverilogext+sv". ## ace 2.02.01 default options
        ## Now add any other options that need to be tool-global vlog_opts
        ' \<debussy\>-2012'. ## this adds support for SV 2012 content, and bypasses ace attempt to remove it
        #" -sverilog ". ## a lot of IPs depend upon this, but it is not allowed to be passed to others?
        ' +define+INTEL_VERDI_BUG',
}; #debussy -hdl_compiler options

$audf{HDLSpec}{-hdl_compiler}{lintra} = {
    -vcomToolArgs => "". ## ace 2.02.01 default options
        ## Now add any other options that should be tool-global vcom_opts
        " LIRA_OPTS_START --lang vhdl93 -mfcu LIRA_OPTS_END",
    -vlogToolArgs => "". ## ace 2.02.01 default options
        ## Now add any other options that should be tool-global vlog_opts
        " LIRA_OPTS_START --lang sv2008 -mfcu LIRA_OPTS_END".
        " +define+INTEL_LINTRA_BUG",
}; #lintra -hdl_compiler options

$audf{HDLSpec}{-hdl_compiler}{lira} = {
    -vcomToolArgs => "". ## ace 2.02.01 default options
        ## Now add any other options that should be tool-global vcom_opts
        " --lang vhdl93 -mfcu ", 
    -vlogToolArgs => "". ## ace 2.02.01 default options
        ## Now add any other options that should be tool-global vlog_opts
        " --lang sv2008 -mfcu ",
}; #lira -hdl_compiler options

$audf{HDLSpec}{-hdl_compiler}{spyglass} = {
}; #spyglass -hdl_compiler options

$audf{HDLSpec}{-hdl_compiler}{vcs} = {
    -elabToolArgs   => "". ## ace 2.02.01 default options
        ## Now add any other options that should be tool-global elab_opts
        " +lint=TFIPC-L -notice",
    -vcomToolArgs   => "". ## ace 2.02.01 default options
        ## Now add any other options that should be tool-global vcom_opts
        " ",
    -vlogToolArgs => "+v2k". ## ace 2.02.01 default options
        ## Now add any other options that should be tool-global vlog_opts
        ' +systemverilogext+sv'. ## this matches the ace debussy default
        #" -sverilog ". ## a lot of IPs depend upon this, but it is not allowed to be passed to others?
        #" -timescale=1ps/1ps" . ## global assumption, because it is illegal for verilog to change timescale if not set at global or library level
        #" -ntb_opts sv_fmt"
        " +define+INTEL_VCS_BUG",
        -iniContents => <<ENDOFVCSINI,
TIME_RESOLUTION = 1ps
TIMEBASE = PS
--XLRM_PACKAGE_IMPORT_COMPAT = TRUE

--Mapping system libraries
--Low-power libraries
UPF : $ENV{VCS_HOME}/$ENV{VCS_TARGET_ARCH}/packages/upf
LPA : $ENV{VCS_HOME}/$ENV{VCS_TARGET_ARCH}/packages/lpa

ENDOFVCSINI
}; #vcs -hdl_compiler options

########################################################################
# HDLSpec -> -src_type
#   - this is used to set language-specific options
# Declares language(s) for source files extensions and whether 
# tests written in them require elaboration with model or not
########################################################################
$audf{HDLSpec}{-src_type} = {
    SystemVerilog => {
        ## -extension   => '/\.sv$|\.vs$|\.svh$|\.vh$/', ## ace 2.02.01 default option
        # Add .svh file suffix.  (Ace doesn't look at .sva files' timestamps by default, like it does for .v and .sv)
        -extension => '/\.(sv[ha]?|v[sh])$/', # This to support *.sv/svh/sva/vs/vh change detection for ACE
    },
}; # -src_type

########################################################################
# HDLSpec -> -tag_overrides
#   - this is used to override tags on libraries and files from subscopes
#     when the subscope tagging is incorrect
########################################################################        
$audf{HDLSpec}{-tag_overrides} = {
    ## example 1: library tag removals and additions
    ##            needs the library name 
    #IPSCOPEA => {
    #    ipscopea_rtl_lib => { -tag => { add =>  'nonsynth', remove => 'nonemu' }, },
    #    ipscopea_ti_lib  => { -tag => { remove => 'nonemu', }, },
    #},
    ## example 2: file-based tag removal and addition
    ##            needs library name (in which the file is explicitly listed) AND
    ##            needs file type (under which the file is explicitly listed) AND
    ##            needs relative path of the file from the explicit entry
    #IPSCOPEB => {
    #    ipscopeb_rtl_lib => { 
    #        -vlog_files => { 
    #            'src/rtl/ipscopeb_abc.sv' => { add    => 'nonsynth', remove => 'nonemu' }, 
    #            'src/rtl/ipscopeb_def.sv' => { remove => 'nonemu', }, 
    #        },
    #    },
    #},

}; # -tag_overrides


########################################################################
# InterfaceVars
#    - this is used to configure built-in ace switches 
#      and to add new ace switches
########################################################################
$audf{InterfaceVars} = {
    ## START IP required switches

    ## END   IP required switches

    ## START common repo-enabling switches
    #-enable_liblist_elab_order (when set to 1)
    #  Enable VCS elaboration component search order with '-liblist'. Follows 
    #  \@{HDLSpec->{<scope>}{models}{<model>}{libs} library defininion array order.
    -enable_liblist_elab_order => { default => 1 },

    #-enable_sub_libraries (when set to 1)
    #  allows using the -sub_libs ace feature
    -enable_sub_libraries      => { default => 1 },

    #-add_toplib_deplibs_to_sublibs_liblist (when set to 1)
    #  allows sublibs to inherit dependencies of parent library
    -add_toplib_deplibs_to_sublibs_liblist => { default => 1, },

    #-enable_tag_overrides (when set to 1)
    #  allows overriding tags on subIP content
    -enable_tag_overrides      => { default => 1 },

    #-enable_unique_runscripts (when set to 1)
    #  creates per compile run script and log file 
    #  ( Compile_vcs.log, Compile_verdi.log)
    -enable_unique_runscripts  => { default => 1 },

    #-use_clean_incdirlist (when set to 1) 
    #  tells ace that when -use_incdir_fulldepth_searchpath is enabled
    #  and if vlog_incdirs has undefs and ''(empty strings) ; ignore the 
    #  undefs and populate only right set of vlog incdir list
    -use_clean_incdirlist     => { default => 1 },

    #-use_incdir_fulldepth_searchpath (when set to 1) 
    #  tells ace to use all scope search paths to find 
    #  matches for *_inc_dir and to not stop at only the first match
    -use_incdir_fulldepth_searchpath => { default => 0 },

    #-use_simple_testlog_names (when set to 1) 
    #  creates simple Compile.log instead of a unique log name with timestamp and PID 
    -use_simple_testlog_names => { default => 1 },
        
    #-use_timestamp  (when set to 1) 
    #  use time stamp in dumped file list name
    -use_timestamp            => { default => 0 },

    ## END  common repo-enabling switches

        
    ## START switches for various elaboration/test modes
    # simulation, not mpp-aware
    -use_sim_mcrd   => {
        type        => "boolean",
        alias       => " -model_compile_results_dir $ENV{ACE_ENG}/$ENV{ACE_PWA_DIR}/results/sim",
    },
    -use_hierdump_mcrd   => {
        type        => "boolean",
        alias       => " -model_compile_results_dir $ENV{ACE_ENG}/$ENV{ACE_PWA_DIR}/results/hierdump",
    },                    
    -sim_test_opts  => {
        type        => "boolean",
        alias       => "-use_sim_compile_opts -exec_test",
    },
    # simulation with low power/power intent
    -use_sim_lp_mcrd   => {
        type        => "boolean",
        alias       => "-model_compile_results_dir $ENV{ACE_ENG}/$ENV{ACE_PWA_DIR}/results/sim_lp",
    },
    -sim_lp_test_opts  => {
        type        => "boolean",
        alias       => "-use_sim_lp_compile_opts -exec_test -enable_pwr_intent ",
    },
    # lint for synthesis
    -use_lint_mcrd   => {
        type        => "boolean",
        alias       => "-model_compile_results_dir $ENV{ACE_ENG}/$ENV{ACE_PWA_DIR}/results/lint",
    },

    -use_sg_lint_mcrd   => {
        type        => "boolean",
        alias       => "-model_compile_results_dir $ENV{ACE_ENG}/$ENV{ACE_PWA_DIR}/results/sg_lint",
    },

    -use_sg_cdc_mcrd   => {
        type        => "boolean",
        alias       => "-model_compile_results_dir $ENV{ACE_ENG}/$ENV{ACE_PWA_DIR}/results/sg_cdc",
    },

    -use_sg_dft_mcrd   => {
        type        => "boolean",
        alias       => "-model_compile_results_dir $ENV{ACE_ENG}/$ENV{ACE_PWA_DIR}/results/sg_dft",
    },

    -use_vclp_mcrd   => {
        type        => "boolean",
        alias       => "-model_compile_results_dir $ENV{ACE_ENG}/$ENV{ACE_PWA_DIR}/results/vclp",
    },
                        
    -lint_test_opts  => {
        type        => "boolean",
        alias       => "-static_check -ignore_filtered_deplib_error", # -enable_testsets -testset stdcell_rtl_lib",
    },
    # svtb lint
    -use_lint_svtb_mcrd   => {
        type        => "boolean",
        alias       => "-model_compile_results_dir $ENV{ACE_ENG}/$ENV{ACE_PWA_DIR}/results/lint/svtb",
    },
    #-lint_svtb_test_opts  => {
    #    type        => "boolean",
    #    alias       => "-static_check -ignore_filtered_deplib_error", # -enable_testsets -testset stdcell_rtl_lib",
    #},
    # cdc
    -use_cdc_mcrd   => {
        type        => "boolean",
        alias       => "-model_compile_results_dir $ENV{ACE_ENG}/$ENV{ACE_PWA_DIR}/results/cdc",
    },
    -use_fv_mcrd   => {
        type        => "boolean",
        alias       => "-model_compile_results_dir $ENV{ACE_ENG}/$ENV{ACE_PWA_DIR}/results/fv",
    },


    -use_check_veloce_rd   => {
        type        => "boolean",
        alias       => "-results $ENV{ACE_ENG}/$ENV{ACE_PWA_DIR}/results/check_veloce",
    },

    -use_check_fpga_rd   => {
        type        => "boolean",
        alias       => "-results  $ENV{ACE_ENG}/$ENV{ACE_PWA_DIR}/results/check_fpga",
    },                  

    #-cdc_test_opts  => {
    #    type        => "boolean",
    #    alias       => "-ignore_filtered_deplib_error -enable_testsets -testset cdc_stubs_lib",
    #},
    #-cdc_cleanup  => {
    #    type        => "boolean",
    #    alias       => "-cleanup -cleanup_pattern_file $ENV{CDC_UTILS}/udf/cdc_cleanup.pp",
    #},
    ## activty-specific compile options
    -use_lint_compile_opts  => {
        type        => "boolean",
        alias       => "-vlog_opts +define+INTEL_SVA_OFF", ## standard global macros.
                       #"+NO_PWR_PINS+SVA_OFF'",           ## nonstandard global macros
    },
    -use_fv_compile_opts  => {
        type        => "boolean",
        alias       => "-vlog_opts +define+INTEL_INST_ON+INTEL_JASPERGOLD_BUG", ## standard global macros
                       #"+INST_ON'",                                             ## nonstandard global macros
    },
    -use_sim_compile_opts  => {
        type        => "boolean",
        alias       => "-vlog_opts +define+INTEL_INST_ON+INTEL_SIMONLY+INTEL_MANUAL_XPROP", ## standard global macros
                       #"+INST_ON+SIMULATION+VCSSIM'",                                       ## nonstandard global macros
    },   
    -use_sim_lp_compile_opts  => {
        type        => "boolean",
        alias       => "-vlog_opts +define+INTEL_INST_ON+INTEL_SIMONLY+INTEL_NO_PWR_PINS+INTEL_MANUAL_XPROP", ## standard global macros
                       #"+INST_ON+SIMULATION+VCSSIM+NO_PWR_PINS'",                                             ## nonstandard global macros
    },   
    -use_syn_compile_opts  => {
        type        => "boolean",
        alias       => "-vlog_opts +define+INTEL_NO_PWR_PINS+INTEL_SVA_OFF", ## standard global macros
                       #"+NO_PWR_PINS+SVA_OFF'",                             ## nonstandard global macros
    },               
    
    
    ## END switches for various elaboration/test modes

    ## START switches for ace_check (aka build_audit)
    -enable_ace_check => { default => 1 },
    ## END   switches for ace_check (aka build_audit)


    ## START switches for analysis
    -models_to_compile => { default  => [ '{.$DutConfig{model}.}'] },
    -testsets_to_compile => { default  => [ 'stdcell_rtl_lib' ] },

    -vlog_opts => {
        clear_default => 1,
        #######################################################
        ## PLEASE DO NOT ADD OCCURRENCE PATH MACROS HERE
        ## PLEASE ADD THEM TO A VERILOG FILE 
        ## AND INCLUDE THIS FILE IN THE APPROPRIATE LIBRARIES
        ## EXAMPLES: src/rtl/mss_top/mss_top_macros.vh or verif/tb/ti/mss_top_ti_macros.vh
        #######################################################

        ## libraries should define most -vlog_opts settings themselves, not depend on a global setting of IP-specific settings
        ## Very little is truely both IP-independent and both tool and flow independent
        #default => [ 
        #    #"-Xkeyopt=ovm", ## libraries should define this themselves; it is not valid for all ips
        #    #'\<vcs\>-timescale=1ps/1ps', ## libraries should define this themselves; it is not valid for all ips
        #    #"-sverilog", ## libraries should define this themselves; it is not valid for all ips
        #    #"+libext+.v+.sv+.vs", ## libraries should define this themselves, it is not valid for all ips
        #    ],
         default => [
           ## '+define+EMULATION_FAST_CLK=ringpll_tb.emu_fastclk', ##uncomment it for emulation mode 
            '\<emu+fpga\>+define+INTEL_EMULATION',
            '\<emu+fpga\>+define+EMULATION_FAST_CLK=ringpll_emu_tb.emu_fastclk',
            '\<emu\>+define+ip2211ringpll_NO_VCSSIM',
            '\<emu\>+define+EMULATION',
            '\<fpga\>+define+INTEL_FPGA',
            '\<fpga\>+define+FPGA',
            '\<fpga\>+define+SYNTHESIS',
            '\<fpga\>+define+ip2211ringpll_NO_VCSSIM',
            '\<emu+fpga\>+define+INTEL_SVA_OFF',
            '\<emu+fpga\>+define+SVA_OFF',            
         ],           
    },
    ## END   switches for analysis


    ## enable PLI libraries by default?
    -enable_denali    => { default => 0 },
    -enable_debussy   => { default => 1 },
    -enable_hdl_xmr   => { default => 0 },
    -enable_hier_dump => { default => 1 },


    ## START switches for elaboration
    -elab_opts => {
        default => [ 
	   "-licqueue",
        "-cm assert+line+tgl+cond+fsm+branch"       
        ],
    },
    ## END   switches for elaboration
    
    ## START switches for simulation
    -simv_args => {
        default => [ 
	   "-licqueue",
	],
    },
    ## END   switches for simulation

    ## START switches for nonscoped generic test configuration
    -post_process_pattern_file => { default => "$ENV{IP_ROOT}/cfg/common/common_post_process.pp" },
    -pre_clean_test            => { default => 1 }, ## don't run tests in a dirty test area
    ## END   switches for nonscoped generic test configuration


    ## START switches for generic static check configuration
    -static_check_cfg_file => {
        clear_default => 1,
        default => [ "$ENV{ISAF_SPYGLASS_METHODOLOGY}/ace_static_check.cfg",
	                 "$ENV{SPYGLASS_METHODOLOGY_RTL_LINT}/ace_static_check.cfg", 
                     "$ENV{LINTRARULES}/cfg/ace_static_check.lintra.cfg", ],
        merging => "ASSIGN",
    },
    ## END   switches for generic static check configuration

    ## START switches for lintra (& lira)
    #-lira_use_filter => { default => 'Lint' },
    -lira_compile_opts => {
        default => []
    },
    -lintra_compile_opts => {
        default => [ "-wd $ENV{IP_ROOT}/tools/lintra/inputs/$ENV{SIP_VARIATION}",
                     "-wd $ENV{IP_ROOT}/tools/lintra/inputs/waivers",
                     "-wf global.lintra.waiv",


            ]
    },
    ## END   switches for lintra (& lira)

    ## START switches for spyglass
    -spyglass_use_filter => { default => 'Synthesis' },
    -spyglass_compile_opts => {
        default => [ 'set_option enableSV09 yes',
                     'set_option define INTEL_NO_PWR_PINS',
                     'set_option define INTEL_SVA_OFF',
                     'set_option define ip2211ringpll_NO_VCSSIM',
                     'set_option define INTC_LINT_ON',
                     #'set_option define INTC_DC', fix for lint issue (bbox)

            ],
    },
    #-spyglass_opts_translator => { default =>  "rtltools_flows::SpyglassOptsTranslator" },
    ## END   switches for spyglass


   # ## START settings for emul
   # -emul_model        => { default  => '{.$DutConfig{model}.}' },
   # -emul_top          => { default  =>  '{.$DutConfig{scope}.}_rtl_lib.{.$DutConfig{scope}.}'},
   # -emul_cfg          => { default => "$ENV{EMUL_CFG_DIR}/emul_build_soc.cfg"},
   # -emul_compiler_tag => { default => "emu"},
   # -emul_filter       => { default => 'Emulation'},
   # -emul_enable_filter => { default => 1},
   # ## END settings for emul

   # ## START settings for effm
   # -effm_model        => { default  => '{.$DutConfig{model}.}' },
   # -effm_top          => { default  =>  '{.$DutConfig{scope}.}_rtl_lib.{.$DutConfig{scope}.}'},
   # -effm_cfg          => { default => "$ENV{EMUL_CFG_DIR}/effmcheck.cfg"},
   # -effm_compiler_tag => { default => "emu"},
   # -effm_filter       => { default => 'Emulation'},
   # -effm_enable_filter => { default => 1},
   # ## END settings for effm

   # # START settings for FPGA
   # -fpga_model        => { default  => '{.$DutConfig{model}.}' },
   # -fpga_top          => { default  =>  '{.$DutConfig{scope}.}_rtl_lib.{.$DutConfig{scope}.}'},
   # -fpga_cfg          => { default => "$ENV{EMUL_CFG_DIR}/fpga_build.cfg"},
   # -fpga_filter       => { default => 'FPGA'},
   # -fpga_compiler_tag => { default => "fpga"},
   # -fpga_enable_filter => { default => 1},
   # ## END settings for FPGA

    # START settings for DVT
    -dvt_models => { default  => [ '{.$DutConfig{model}.}'] },

    -dvt_cmdopts => {
        default => [ 
                     #"-lang vhdl", # uncommment ONLY if you have to have VHDL support
                   ],
    },
    -dvt_heapsize => {
        default => '8G', # syntax is <N>[g|G|m|M|k|K]
    },
    -dvt_pre_buildinclude => {
        default => [  "+dvt_build_log_to_file+false",
                      # "+dvt_disable_checks+UNDECLARED_IDENTIFIER",
                      # "+dvt_full_compile_checks+OFF",
                      # "+dvt_incremental_compile_checks+FILE",
                      # "+dvt_incremental_compile_checks+LIB", # restricts the incremental to current library
                      # "+dvt_incremental_compile_checks+PKG", # restricts the incremental to current package
                      # "+dvt_incremental_compile_max_lines+0",
                      "+dvt_file_compile_timeout+90", # 90sec timeout
                   ],
    },
    -dvt_exclude_names	 => {
        default => [ ".git",
                     ".git_hooks",
                     ".natural_docs_proj",
                     "MockTurnin*",
                     "GATEKEEPER",
                     "results",
                     "target",
                     "log",
                     "report",
                     "aceroot",
                     "regression",  
                   ],
    },
    -dvt_exclude_prjrelpaths => {
        default => [ "debussyLog",
                     "subIP/*/tools/dvt", # This is required so that other launch buttons aren't pulled in
                     "subIP/*/scripts", # Don't bring in other scripts dirs. They often lead to links that go on forever
                     "subBlock/*/tools/dvt", # This is required so that other launch buttons aren't pulled in
                     "subIP",  ### Uncomment this if you want to exclude ALL subIPs for faster build performance
                   ],
    },
    ## END settings for DVT

    -test_in_model => { default => 1},
    -enable_testcopy_with_test_in_model => {default => 1},                    
    -name_of_test_plusarg => { default => "UVM_TESTNAME"},
};
    

########################################################################
# InterfaceVars -> $PROJECT
#    - this is used to configure built-in ace switches 
#      and to add new ace switches, usually in the context of tests
########################################################################
$audf{InterfaceVars}{$PROJECT} = {
    __PROTOTYPES => { import => [ "TEST", "LOWPOWER", "CDC", ], },

    -model => { default  => '{.$DutConfig{model}.}' },
    #-implicit_runmode_libs => { default => [ "${PROJECT}::RunModes" ], },
    
    ## START simulation project settings
    -ovm_verbosity => {
        type     => "SCALAR",
        shortcut => "-ovrb",
        switch   => {
            none   => "-simv_args_first +OVM_VERBOSITY=OVM_NONE ",
            low    => "-simv_args_first +OVM_VERBOSITY=OVM_LOW ",
            medium => "-simv_args_first +OVM_VERBOSITY=OVM_MEDIUM ",
            high   => "-simv_args_first +OVM_VERBOSITY=OVM_HIGH ",
            full   => "-simv_args_first +OVM_VERBOSITY=OVM_FULL ",
            debug  => "-simv_args_first +OVM_VERBOSITY=OVM_DEBUG ",
        },
    },

    -test_dependent_libs => {
        clear_default => 1,
        default => [ ],
    },
    
    -test_elab_opts => {
        #clear_default => 1,
        #default => [ "-ntb_opts sv_fmt",
        #             "-sverilog", ## not valid for all IPs
        #             "+error+1000", ## print lots of errors
        #             "-liblist_nocelldiff",
        #             "-liblist_work",
        #             #"$ENV{SAOLA_HOME}/libs/Linux_x86_64/libsla.so",
        #    ],
    },

    -test_run_copy_files   => {
        default => [],
    },

    -test_run_link_files => {
        default => [],
    }, 
    
    -test_run_touch_dirs => {
        default => [],
    },

    -test_vlog_incdirs => { 
        clear_default => 1,
        default => [],                           
    },
    
    -test_vlog_opts => {
        clear_default => 1,
        #######################################################
        ## PLEASE DO NOT ADD OCCURRENCE_PATH MACROS HERE
        ## PLEASE ADD THEM TO A VERILOG FILE
        ## AND INCLUDE THIS FILE IN THE APPROPRIATE LIBRARIES
        ## EXAMPLES: src/rtl/mss_top/mss_top_macros.vh or verif/tb/ti/mss_top_ti_macros.vh
        #######################################################

        default => [ "-Xkeyopt=ovm",
                     "-timescale=1ps/1ps",
                     "-sverilog", ## not valid for all IPs
                     "-ntb_opts sv_fmt",
                     "+libext+.v+.sv+.vs",
                     "+define+SNPS201412BC", # Needed whenever bc_mode is set. (XLRM_PACKAGE_IMPORT_COMPAT = TRUE)
            ],
    },

    -vcs_profiler => {
        type     => "SCALAR",
        shortcut => "prof",
        alias    => "-nocleanup -test_elab_opts -simprofile -simv_args -simprofile,<VAL>",
    },
    -enable_dump_hier_copy => {
        type => "BOOLEAN",
        overridable => { default => 0 },
        valid_test_option => 1,
        help => { 
            desc => "Enable copy of log from running generation of top.hier for sim",
            level => 3,
            group => "TEST",
            hide => 1, 
        },
    },
    -enable_dump_hier_lp_copy => {
        type => "BOOLEAN",
        overridable => { default => 0 },
        valid_test_option => 1,
        help => { 
            desc => "Enable copy of log from running generation of top.hier for lp",
            level => 3,
            group => "TEST",
            hide => 1, 
        },
    },
    ## END simulation project settings
    
    
    ## START power-aware project settings
    -pwr_elab_opts_vcs => { 
        clear_default => 1, 
        default => [ "-power=auto_complete", #VCS 2014.12
                     "-power=apfcompat", # skips corruption of reals, constants, and signals assigned only in initial blocks
                     "-power=pass_thru_const", # skips corruption of literals (1'b1 or 1'b0) in port maps or RHS of continuous assignments
                     "-power=rtlpg -power=verbose -power=dumplpxover -power=dumplpconnect", # from GLM
                     "-power=inference", # enables common FF inference between NLP and XPROP; avoids issues when XPROP is enabled on top of NLP or vice versa
                     #"-liblist UPF+LPA",
                     "-error=noUPF_CPSE", ## what is this??
            ],
    },
    ## END power-aware project settings


    ## START xprop project settings
    -enable_xprop  => {
        valid_test_option => 1,
        alias => "-test_elab_opts -xprop=$ENV{MODEL_ROOT}/cfg/xprop/$PROJECT.xprop.cfg -test_elab_opts -xprop=unifiedInference ",
        help  => {
            desc => "Enable xprop ",
            group=> "TEST",
            level => 1,
        },
    },
    ## END   xprop project settings
    

    ## START cdc project settings
    ## this is NOT an ace-built in option,
    ## but it is needed to enable running ONDA (predecessor to cdc_lint)
    -enable_onda_postchecker => {
        type => "BOOLEAN",
        overridable => { default => 0 },
        valid_test_option => 1,
        help => { 
            desc => "Enable ONDA post-processing checker",
            level => 3,
            group => "CDC",
            hide => 1, 
        },
    },
    
    ## this is an ace-built in option, needed here only if on an older ace version
    #-enable_cdc_lint => {
    #    type => "BOOLEAN",
    #    shortcut => "ecl",
    #    valid_test_option => 1,
    #    overridable => { default => 0 },
    #    help => {
    #        desc => "enable cdc lint on completion of each cdc static check run",
    #        level => 3,
    #        group => "CDC",
    #        hide => 1,
    #    },
    #},

    ## END   cdc project settings


    ## START lira project settings
    -lira_exe_opts => {
        clear_default => 1,
        default => [ #'--bind_locally',
                     #'--dynamic_validation', 
                     #'--multiple_driver_resolution default',
            ],
    },
    ## END   lira project settings
    
    
    ## START lintra project settings
    -lintra_exe_opts => { 
        clear_default => 1,
        default => [ #'--disable_persistency', 
                     #'--ignore_missing_rules',
                     #'--ignore_unelaborated_violations',
            ], 
    },

    -lintra_waiver_files => {
        clear_default => 1, 
        default => [ #"$ENV{IP_ROOT}/tools/lintra/inputs/waivers/global.lintra.waiv", 
                     #"$ENV{MODEL_ROOT}/tools/lintra/inputs/common/{.$DutConfig{target}.}.lintra.waiv", 
	               ],
    },
    ## END   lintra project settings
    

    ## START spyglass project settings
    -spyglass_exe_opts => {
        clear_default => 1, 
        default =>[ 'set_option enableSV09 yes',
                    #'set_option enableSV yes',
                    'set_option enable_vlog_config yes',
                    'set_option strict_vlog_config yes',
                    'set_option write_vlog_config_report yes',
                    'set_option enable_save_restore no',
                    'set_option dw no',
#                    "set_option lib SPY_DW_WORK  $ENV{ACE_ENG}/$ENV{ACE_PWA_DIR}/results/sg_lint/spyglass_libs/$ENV{SPYGLASS_VER}/SPY_DW_WORK",
                    'set_option no_strict_sgdc_check yes', #Required for spyglass dft
            ],
    },

    -spyglass_goals => { 
        clear_default => 1, 
        default => [ ], 
    },
    ## END   spyglass project settings

}; # $PROJECT InterfaceVars



1;
