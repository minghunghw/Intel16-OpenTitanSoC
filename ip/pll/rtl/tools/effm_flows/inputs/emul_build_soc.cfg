#### emul_build_soc  setup template file ###
#######################################################################################################
### File : emul_build_soc.cfg    Project: ACE Example prototype_2
### Description: 
###     This file provides the basic setup template required for emul_build_soc utility.
###     emul_build_soc is the unified front-end interface for all emulation/fpga build tasks.
###     The purpose of this file is to provide all project specific env in this file, so 
###     the emul_build_soc script remains project independent and portable.  
###     To obtain a template or to use one in use by other projects team, please visit the 
###     CoE SVN Repository. More information on this utility is provided in the CoE emulation 
###     community at http://goto/emulation
###     THIS FILE IS CUSTOMIZED BY PROJCT EMULATION TEAMS.
###
###
### Different Check and Build flows supported by this file: 
###      Use tool cmd:  "emul_build_soc --show_flow" 
###                      see a list of RTL Compliance checking flows currently supported by this file 
###       
###
### Following are reserved KEYWORDS in this utility: 
### CHECK <value>  Provides a simple ability to check for existence of dir, file or env var. 
###        The BATCH script exits if the CHECK fails. 
### 
###
### FLOW <flow_name_uniq_id> <dependency_list> followed by END_FLOW
###        Helps define a group of scriptable actions together. The content
###        inside a FLOW has to be an unix cmd (and/or CHECK directive) or a comment. 
###
###        <flow_name_uniq_id>  is a unique identifier for a flow name
###        <dependency_list>  is a list of child flow names separated by spaces 
###        The idea is to facilitate modular and hierarchical scriptable tasks. 
###        Each flow can be called from emul_build_soc cmd line: --run_stage <flow_name>
###        Reserved FLOW KEYWORDS:INITIAL, FINAL and DEFAULT
###        FLOW INITIAL : Is run first and foremost, if enabled.
###        FLOW DEFAULT : Is run only when a run_stage is not specified trhu cmd line.
###        FLOW FINAL:  Is run at the end after all flows have finished running. 
###
### RUN followed by END_RUN 
###        Defines FLOW  control i.e. which FLOWS (defined earlier) should be run or not.   
###        FLOW <ENABLED | DISENABLED> 
###        By default, all FLOWS are disabled. FLOWS have to be explicitly ENABLED to run. 
###        Parent flows will not be run if it has a dependency on a child FLOW which has been disabled. 
###
### PARAMS followed by END_PARAMS  
###        Helps define parameters for tools
###        and for user's use in the batch scripts. This is case-sensitive.
###        When a PARAM is used anywhere outside this section, it is simply replaced by
###        its definition. 
###        These parameters can be overrided with value from cmd line: --params <KEY>=VALUE
###        Here's a list of PARAMS keywords reserved and utilized by the tool:
###        CMD_SHELL, EMAIL_TO,  WORK_AREA. 
###   
###
###        See below for a description of optional tool configuration parameters.
###
### WORK_AREA  <path1> <path2> ... <pathn> 
###        default: Current working dir. ACE creates a work area before calling this tool.
###        A selection policy: When multiple paths are provided, select the path with most space.
###        Use [ MIN_SPACE <n>  ]   where n is minimum space in GB is guaranteed. 
###           This helps pick the path with with most space but has atleast the min specified 
###           space, if not error out.
###        NEW_WORK_AREA  ON   Helps create new work area with WORK_AREA_TAG prefix and date_stamp. 
###           Otherwise use user provided existing work area path.
###
### EMAIL_TO <uid@domain, ..., uid2@domain2>
###        Default email generation is turned off.
###
###
### CMD_SHELL #!/bin/bash -xe   
###        Default shell is /bin/bash -e 
###        Allows user to override tool default (/bin/bash -e). -x provides verbose debug msgs
###
#######################################################################################################


#======================================================================================================
# Define Parameters for use by flows later in this file 
# These parameters can be overided from cmd line: --params <KEY>=<VALUE>. 
#======================================================================================================

PARAMS
  #These env vars are now set in emulation.env:
  #EMUL_TOOLS_DIR, EMUL_CFG_DIR, EMUL_RESULTS_DIR  
  #### Tools used in this flow 
  EMUBUILD /nfs/site/eda/group/SYSNAME/emu/intel/emubuild/2.8.9/bin/emubuild
  PERL /usr/intel/pkgs/perl/5.14.1-threads/bin/perl

  #### Env Files used in this flow
  BUILDCFG     $EMUL_CFG_DIR/cfg/buildProjectCfg.yml
  TBXCFG       $EMUL_CFG_DIR/veloce/tbx.config 
  SUMMARY_LOG  $EFFM_RESULTS_DIR/EFFM_Results_Summary.log
  VERBOSE_LOG  $EFFM_RESULTS_DIR/EFFM_Results_Verbose.log
  
  ## TOP and METADATA values are provided by ACE
  E_METADATA  $EMULATION_METADATA
  F_METADATA  $FPGA_METADATA
  TOP       $TOP


END_PARAMS

#======================================================================================================
# Flow Name: INITIAL  ("INITIAL" is a reserved Keyword)
# Description: The very first run_stage that sets up Environment and other pre-requsites 
#              for other flows. This runs for all flows. 
#======================================================================================================

FLOW INITIAL NONE
  # This flow is run first prior to all other flows.
  # Other flows run if and only if this flow completes without error.
  echo "Launching Flow: INITIAL. "
  echo "Running basic workspace/env setup procedure for FLOWs to follow."
  echo "Current dir: " $PWD
  echo "Check emulation env vars:" 
  env | grep EMU
  echo "Check availability of required tools:"
  export WORKING_DIR=`pwd`
  #-------------------------------------------------------
  ### Check if YAML file exist
  if [ ! -f "$EMUL_CFG_DIR/cfg/buildProjectCfg.yml" ];
  then
  echo "-E- buildProjectCfg.yml was not found in $EMUL_CFG_DIR/cfg directory"
  fi
  ### Check if Ace version is 2.02.04 or higher
  if [ -f "$EMUL_META_DATA" -a -f "$FPGA_META_DATA" ];
  then
  echo "Running in single shared model mode" 
  export EFFM_RESULTS_DIR=`dirname $EMUL_META_DATA`
  export EMULATION_METADATA=`echo "$EMUL_META_DATA"`
  export FPGA_METADATA=`echo "$FPGA_META_DATA"`
  ### Check if Ace version is 2.01.32 or higher
  elif [ -f "$SYNTH_META_DATA" ];
  then
  echo "Running in Emulation model mode by default"
  export EFFM_RESULTS_DIR=`dirname $SYNTH_META_DATA`
  export EMULATION_METADATA=`echo "$SYNTH_META_DATA"`
  export FPGA_METADATA=`echo "$SYNTH_META_DATA"`
  ### Check if $EMUL_RESULTS_DIR is manually set by user
  elif [ -d "$EMUL_RESULTS_DIR" ];
  then
  ### Check if metadata file exists in EMUL_RESULTS_DIR
  if [ ! -e *.ace_metadata.pl ];
  then
  echo "No ACE metadata file was found in your EMUL_RESULTS_DIR. Perhaps, this variable was not set"
  exit 1
  ### Pick latest metadata from EMUL_RESULTS_DIR if more than one exist
  else
  LATEST_METADATA=$(ls -1t | grep '.*.ace_metadata.pl' | head -n 1)
  export EFFM_RESULTS_DIR=`echo "$EMUL_RESULTS_DIR"`
  export EMULATION_METADATA=`echo "$EMUL_RESULTS_DIR/$LATEST_METADATA"`
  export FPGA_METADATA=`echo "$EMUL_RESULTS_DIR/$LATEST_METADATA"`
  fi
  ### Error out if Ace version is not higher than 2.01.32 and EMUL_RESULTS_DIR is not set by user 
  else 
  echo "-E- You need to set EMUL_RESULTS_DIR if you are  not using Ace 2.01.32 or later"
  exit 1
  fi
  #-------------------------------------------------------
  echo "echo Sourcing setup.env " > setup.env
  echo cd $PWD                                  >> setup.env
  echo "date"                                   >> setup.env
  chmod 770 setup.env
  #Create Summary Error Report files
  echo "Summary of ALL RTL Checks for FPGA/Emulation: " > SUMMARY_LOG  
END_FLOW

#======================================================================================================
# Flow Name: FINAL  ("FINAL" is a reserved Keyword)
# Description: This FLOW is run LAST after all FLOWS have finished.  
#======================================================================================================

FLOW FINAL INITIAL
   source scripts/INITIAL
   echo Generating Error Summary
   echo ==================SUMMARY RESULTS OF ALL DESIGNATED CHECKS===========
   
   if [ -e "CHECK_ZSE/target/zse1/summary.log" ];
   then 
       echo "" >> SUMMARY_LOG
       echo "********* CHECK_ZSE: SUMMARY OF ZEBU SERVER EMULATION CHECKS **********"  >> SUMMARY_LOG
       cat CHECK_ZSE/target/zse1/summary.log >> SUMMARY_LOG
       echo "" >> VERBOSE_LOG
       echo "********* CHECK_ZSE: VERBOSE LOG OF ZEBU SERVER EMULATION CHECKS **********"  >> VERBOSE_LOG
       cat CHECK_ZSE/target/zse1/summary_verbose.log >> VERBOSE_LOG
   fi

   if [ -e "CHECK_VELOCE/target/tbx_D2/summary.log" ];
   then 
       echo "" >> SUMMARY_LOG
       echo "********* CHECK_VEL0CE: SUMMARY OF VELOCE SERVER EMULATION CHECKS **********"  >> SUMMARY_LOG
       cat CHECK_VELOCE/target/tbx_D2/summary.log >> SUMMARY_LOG
       echo "" >> VERBOSE_LOG
       echo "********* CHECK_VEL0CE: VERBOSE LOG OF VELOCE SERVER EMULATION CHECKS **********"  >> VERBOSE_LOG
       cat CHECK_VELOCE/target/tbx_D2/summary_verbose.log >> VERBOSE_LOG
   fi

   if [ -e "CHECK_PALLADIUM/target/pz1/summary.log" ];
   then
       echo "" >> SUMMARY_LOG
       echo "********* CHECK_PALLADIUM: SUMMARY OF PALLADIUM SERVER EMULATION CHECKS **********"  >> SUMMARY_LOG
       cat CHECK_PALLADIUM/target/pz1/summary.log >> SUMMARY_LOG
       echo "" >> VERBOSE_LOG
       echo "********* CHECK_PALLADIUM: VERBOSE LOG OF PALLADIUM SERVER EMULATION CHECKS **********"  >> VERBOSE_LOG
       cat CHECK_PALLADIUM/target/pz1/summary_verbose.log >> VERBOSE_LOG
   fi

   if [ -e "CHECK_FPGA/target/fpga_protocompiler/summary.log" ];
   then 
       echo "" >> SUMMARY_LOG
       echo "*********SUMMARY OF FPGA CHECKS **********"  >> SUMMARY_LOG
       cat CHECK_FPGA/target/fpga_protocompiler/summary.log >> SUMMARY_LOG
       echo "" >> VERBOSE_LOG
       echo "********VERBOSE LOG OF FPGA CHECKS **********"  >> VERBOSE_LOG
       cat CHECK_FPGA/target/fpga_protocompiler/summary_verbose.log >> VERBOSE_LOG
   fi

   cat SUMMARY_LOG
   export PROJ_MONITOR_NAME="EFFM"
   PERL $EMUL_TOOLS_DIR/diamond_tracker.pl
END_FLOW




#======================================================================================================
# Flow Name: DEFAULT ("DEFAULT" is a reserved Keyword)
# Description: This is set of default flows that are automatically run when emul_build_soc 
# is run without a --run_stage cmd line
# Default can be aliased to other flows that needs to be run automatically. 
# The purpose is to simplify usage for DE folks, who just run a bunch of checks enabled
# by emulation team.
#======================================================================================================

FLOW DEFAULT  INITIAL CHECK_FPGA CHECK_ZSE CHECK_VELOCE
   echo Launching FLOW: DEFAULT
   echo A "run_stage" is *not* specified thru cmd line arg. 
   echo Following flows enabled as default for this project has been run: CHECK_VELOCE CHECK_ZSE CHECK_FPGA
END_FLOW


#======================================================================================================
# Flow Name: CHECK_EMULATION
# Description: This FLOW is run from cmd line. Provides a simple way to alias many flows into
#     one cmd_line option. This simplifies for DE to run one cmd, which launches all the active 
#     checks enabled by project emulation team. This is the cmd used for EMULATION checks.
#======================================================================================================

FLOW CHECK_EMULATION INITIAL CHECK_ZSE CHECK_VELOCE CHECK_PALLADIUM
   echo Launching FLOW: CHECK_ALL
   echo FOllowing flows enabled as part of GK check have been run at this time: CHECK_ZSE CHECK_VELOCE CHECK_PALLADIUM
END_FLOW

#======================================================================================================
# Flow Name: CHECK_VELOCE
# Description: Runs emulation checks for Mentor's Veloce platform
#======================================================================================================

FLOW CHECK_VELOCE INITIAL
   source scripts/INITIAL
   echo "Running.......... FLOW: CHECK_VELOCE "
   echo "Current dir: " $PWD
   echo "Please, check $PWD/FILTER_REPORT.log for the results of Ace filter check"
   PERL $EMUL_TOOLS_DIR/filter_check.pl Emulation
   mkdir -p CHECK_VELOCE
   cd CHECK_VELOCE
   if [ -e ".CHECK_VELOCE_PASSED" ];
   then
      rm -rf .CHECK_VELOCE_PASSED
   fi
   ln -sf $EMUL_CFG_DIR/veloce 
   ln -sf $EMUL_CFG_DIR/cfg
   ln -sf E_METADATA ACE_METAFILE
   ln -sf $EMUL_CFG_DIR/emulation_defines.f 
   echo Calling EMUBUILD for Veloce ....
   unset MGLS_LICENSE_FILE
   EMUBUILD -m . -cfg VELOCE -cfg- -top TOP -clean_target -effm compile -no_parallel -override_hdk_env -use_emubuild_tooldata
   echo return status $?
   touch .CHECK_VELOCE_PASSED
END_FLOW

#======================================================================================================
# Flow Name: CHECK_ZSE
# Description: Runs emulation checks for Synopsys Zebu Server platform.  Runs front End 
#======================================================================================================

FLOW CHECK_ZSE INITIAL
   source scripts/INITIAL
   echo "Running.......... FLOW: CHECK_ZSE "
   echo "Current dir: " $PWD
   echo "Please, check $PWD/FILTER_REPORT.log for the results of Ace filter check"
   PERL $EMUL_TOOLS_DIR/filter_check.pl Emulation
   mkdir -p CHECK_ZSE
   cd CHECK_ZSE
   if [ -e ".CHECK_ZSE_PASSED" ];
   then
      rm -rf .CHECK_ZSE_PASSED
   fi
   ln -sf $EMUL_CFG_DIR/zebu
   ln -sf $EMUL_CFG_DIR/cfg
   ln -sf E_METADATA ACE_METAFILE
   ln -sf $EMUL_CFG_DIR/emulation_defines.f
   echo Calling EMUBUILD for ZeBu .... 
   export HBL_RELEASE="/p/vt/tools/sim/vendor/zse/etc/emubuild/hbl/V18.09/zebu_intel_common.utf"
   EMUBUILD -m . -cfg ZSE -cfg- -top TOP -clean_target -effm synthesis -no_parallel -override_hdk_env -use_emubuild_tooldata
   echo return status $?
   touch .CHECK_ZSE_PASSED
END_FLOW

#======================================================================================================
# Flow Name: CHECK_FPGA
# Description: Test flow for testing the FPGA flow based on EMUBUILD.
#======================================================================================================

FLOW CHECK_FPGA INITIAL
   source scripts/INITIAL
   echo "Running.......... FLOW: CHECK_FPGA "
   echo "Current dir: " $PWD
   echo "Please, check $PWD/FILTER_REPORT.log for the results of Ace filter check"
   PERL $EMUL_TOOLS_DIR/filter_check.pl FPGA
   mkdir -p CHECK_FPGA
   cd CHECK_FPGA
   mkdir -p projects   
   ln -sf $EMUL_CFG_DIR/fpga 
   ln -sf $EMUL_CFG_DIR/cfg
   ln -sf F_METADATA ACE_METAFILE
   ln -sf $EMUL_CFG_DIR/emulation_defines.f 
   echo Calling EMUBUILD for FPGA .... 
   unset SNPSLMD_LICENSE_FILE
   EMUBUILD -m . -cfg FPGA -cfg- -top TOP -clean_target -effm synthesis -no_parallel -override_hdk_env -use_emubuild_tooldata
   echo return status $?
   touch .CHECK_FPGA_PASSED

END_FLOW

#======================================================================================================
# Flow Name: CHECK_PALLADIUM
# Description: Test flow for testing the Palladium flow based on EMUBUILD.
#======================================================================================================

FLOW CHECK_PALLADIUM INITIAL
   source scripts/INITIAL
   echo "Running.......... FLOW: CHECK_PALLADIUM "
   echo "Current dir: " $PWD
   echo "Please, check $PWD/FILTER_REPORT.log for the results of Ace filter check"
   PERL $EMUL_TOOLS_DIR/filter_check.pl Emulation
   mkdir -p CHECK_PALLADIUM
   cd CHECK_PALLADIUM
   mkdir -p projects
   ln -sf $EMUL_CFG_DIR/palladium
   ln -sf $EMUL_CFG_DIR/cfg
   ln -sf F_METADATA ACE_METAFILE
   ln -sf $EMUL_CFG_DIR/emulation_defines.f
   echo Calling EMUBUILD for PALLADIUM ....
   EMUBUILD -m . -cfg PALLADIUM -cfg- -top TOP -clean_target -effm synthesis -no_parallel -override_hdk_env -use_emubuild_tooldata
   echo return status $?
   touch .CHECK_PALLADIUM_PASSED

END_FLOW

#======================================================================================================
# RUN CONTROL: option ENABLED or DISABLED
#     Only the flows ENABLED are allowed to run! 
#     By default all FLOWS are DISABLED if they are explicitly ENABLED/DISABLED in RUN block. 
#     Flows are run explicitly thru cmd line arg: --run_stage <flow_name>. 
#     Flows are also run when the parent flow has an explicit dependency on sub-flows. 
#     Flows are called to run explicitly or are run 
#     an explicit dependency specified for a parent flow.
#======================================================================================================

RUN
  
  INITIAL 	ENABLED
  DEFAULT       ENABLED
  FINAL         ENABLED
  CHECK_VELOCE  ENABLED
  CHECK_FPGA    ENABLED
  CHECK_ZSE     ENABLED
  CHECK_PALLADIUM ENABLED
  CHECK_EMULATION ENABLED

END_RUN

