
package dc_config;
use lib "$ENV{RTL_PROJ_BIN}/perllib";
use ToolConfig();

use vars qw($repo_root);
BEGIN {
    if(!defined($ENV{DUT})) {$ENV{DUT} = ToolConfig::get_facet('dut');}
    if(!defined($ENV{ACE_ENG})) {$ENV{ACE_ENG} = $ENV{MODEL_ROOT};}
    if(!defined($ENV{ACE_PWA_DIR})) {$ENV{ACE_PWA_DIR} = "target/$ENV{DUT}";}
    $repo_root = ToolConfig::ToolConfig_get_tool_env_var('ace_setup','REPO_ROOT');
}

sub get_data() {
    my $lintra_args        = "--disable_persistency --stage_limit lira_unreachable_code_elimination -repr :violations:full";
    my $lintra_ace_args    = '-results results/DC/lint -filter Lint';
       $lintra_ace_args   .= ' -model_compile_results_dir $MODEL_ROOT/target/default/results/DC/lint';
    my $spyglass_ace_args  = '-results results/DC/lint -filter Lint';
       $spyglass_ace_args .= ' -model_compile_results_dir $MODEL_ROOT/target/default/results/DC/lint ';
    my $setup_project = $ENV{CFG_PROJECT};$setup_project =~ s/^[a-z]hdk/hdk/;
       $setup_project = ToolConfig::get_facet('be_project') if ToolConfig::facet_exists('be_project');
    
    my $data = {
        INPUTS => {
           -mco_path_for_merge => "$ENV{MODEL_ROOT}/target/default/exceptions",
           -upf_path => "$ENV{REPO_ROOT}/tools/upf/outputs/default/mss_top/merged",
           -mco_path_for_copy => [
               '$model_root/tools/febe/inputs/scripts/$top_module/',
               '$model_root/tools/mco/inputs/mbist',
               '$model_root/tools/febe/inputs/scripts/',
            ],
            -top_hier             => "$ENV{ACE_ENG}/$ENV{ACE_PWA_DIR}/results/top.hier.sim.mss_top_top",
            #-use_chipdump_file => 1,
            #-chip_dump => "$ENV{REPO_ROOT}/results/DC/fev_v2k/fullchipdump.final.pl",
        },
        'SETUP' => {
           -setup_project        => $setup_project,
           -setup_source         => ToolConfig::ToolConfig_get_tool_path('setproj'),
           -setup_milestone      => ToolConfig::ToolConfig_get_tool_var('setproj', 'milestone'),
           -setup_options        => ToolConfig::ToolConfig_get_tool_var('setproj', 'options'),
           -enable_febe_populate => 1,
           -populate_input_fpath => ["$ENV{MODEL_ROOT}/tools/febe/inputs/populate/input.yaml",],
           -additional_passthru_vars => [
                'MODEL_ROOT', 'DUT', 'RTL_PROJ_BIN', 'RTL_PROJ_TOOLS', 'RTL_CAD_ROOT'
           ],
        },
        'tophiergen' => {
           -hier_dump_top => "mss_top_top_tb",
           #-args          => '-noenable_hier_translate -enabled_post_process_modes soc_elab_only -simv_args +HIER_DUMP -simv_args +RUN_TEST=0 -simv_args +DUMP_HIER_AND_EXIT=1 -results results/DC -model_compile_results_dir $MODEL_ROOT/target/$DUT/results/DC',
           -args => '-exec_test -sim_test_opts -use_sim_mcrd -results results/sim',
           -test_name     => "mss_top_top:vcs_dump",
        },
#        'prescript' => {
#           -command => "ace -ccd -noegc -results results/DC -filter Simulation",
#        },
        'spyglass_build' => {
           -command => "ace -ccsg -noegc -ignore_filtered_deplib_error -max_num_make_processes 4 $spyglass_ace_args",
        },
#        'static_check' => {
#           -test_suffix => ':spyglass',
#           -args => "-nocleanup $spyglass_ace_args",
#        },
        'sgdft' => {
            'drc' => {
                -ace_args => "$spyglass_ace_args",
            },
        },
        'spyglass_lp' => {
            -test_suffix => ":spyglass_lp",
            -args => " $spyglass_ace_args",
        },
        'lintra_elab' => {
            -test_dir    => "",
            -test_suffix => ":lintra_lint",
            -args    => "$lintra_args",
            -command => "ace -sc $lintra_ace_args",
        },
        'lintra_build' => {
            -command => "ace -ccolt -noegc -ignore_filtered_deplib_error -max_num_make_processes 4 $lintra_ace_args",
            -args    => "$lintra_args",
        },
        zirconqa => {
           -args => ToolConfig::ToolConfig_get_tool_var('zirconqa','zircon_args'),
        },
#        'gen_collateral' => {
#            -extra_commands_post_populate => ['echo "set configulate_local `getTv configulate_local`" > configulate_local.version'],
#        },
        'SYN_CALIBER' => {
           -override_synopsys_pt_setup => 1,
           -populate => '',
           -command => '$NOBLE_SD_FLOW_DIR/cmdlines/syn_caliber/syn_caliber.cmdline',
        },
        'FV' => {
            -populate => '',
            -fv_binary => '$FEV_FLOW_PATH/flows/rdt2/fev/bin/runFEV',
        },
        'FISHTAIL' => {
            -command => '$FT_FLOW_PATH/bin/runFT',
        },
        'hip_list' => {
            -gen_hip_list_args => '--strict --no-mw --no-ndm',
        },
        'V2K_PREP' => {
            -elab_log => "$ENV{MODEL_ROOT}/target/$ENV{DUT}/log/mss_top_top_top_hier_gen.mss_top_top.simbuild.rtl.top_hier_gen_mpp.log.gz",
            -hier     => '^mss_top_top_tb.mss_top_top',
            -ace_command        => "ace -rtl M:mss_top -filter MppSimulation -results results/sim_mpp",
            -ace_filter_command => "ace -rtl M:mss_top -filter Synthesis -results results/synth",
            -acefullfilelist => "$ENV{MODEL_ROOT}/target/$ENV{DUT}/results/sim_mpp/mss_top.Mmss_top.filelist.MppSimulation.pl",
            -acefilelist     => "$ENV{MODEL_ROOT}/target/$ENV{DUT}/results/synth/mss_top.Mmss_top.filelist.Synthesis.pl",
        },
        'flg_v2k' => {
            #-enable_all_dependent_libs => 1,
            -vcsmakelogsdir => "$ENV{MODEL_ROOT}/target/$ENV{DUT}/results/sim_mpp/makefiles/vcs/makeLogs",
        },
        review => {
             -populate  => '',
             -switches => '-block $DBB -fe2be',
             -indicate_switches => "--report fe2be_tools --config fe2be_polaris.yaml --verbose", 
        },

    };
    
}
1;



