#### emul_build_soc  setup template file ###
#######################################################################################################
### File : emul_build_soc_template.cfg    Project: NONE
### Description: 
###     This file provides the basic setup template required for emul_build_soc utility.
###     emul_build_soc is the unified front-end interface for all emulation/fpga build tasks.
###     The purpose of this file is to provide all project specific env in this file, so 
###     the emul_build_soc script remains project independent and portable.  
###     To obtain a template or to use one in use by other projects team, please visit the CoE SVN Repository.
###     More information on this utility is provided in the CoE emulation community at http://goto/emulation
###     THIS FILE IS CUSTOMIZED BY PROJCT EMULATION TEAM.
###
###
### Different Check and Build flows:
###                        RTL compliance checking or model build flows.
###                        Checks can be any of the following:
###                        -CHECK_EMUL_GK: runs different emulation checks currently enabled for Gatekeeper turn-in
###                        -CHECK_FPGA_GK: runs different fpga checks currently enabled in Gatekeeper turn-in
###                        -CHECK_EMUL_LINT: runs emulation lintra checks
###                        -CHECK_FPGA_LINT: runs fpga lintra checks
###                        -CHECK_ZSE: runs Synopsys Zebu Server front end synthesis checks
###                        -CHECK_VELOCE: runs Mentor Veloce front-end synthesis checks
###                        -CHECK_ALL:  runs all tasks enabled for this project
###
###                        Build flows for specified model type
###                        -BUILD_EMUL_ZSE: Zse hw model of emulation DUT
###                        -BUILD_VELOCE: Veloce HW model of emulation DUT
###                        -BUILD_FPGA: Builds the FPGA model
###
###
### Following are reserved KEYWORDS in this utility: 
### CHECK <value>  Provides a simple ability to check for existence of dir, file or env var. 
###        The BATCH script exits if the CHECK fails. 
### 
###
### FLOW <flow_name_uniq_id> <dependency_list> followed by END_FLOW
###        Helps define a group of scriptable actions together. The content
###        inside a FLOW has to be an unix cmd (and/or CHECK directive) or a comment. 
###
###        <flow_name_uniq_id>  is a unique identifier for a flow name
###        <dependency_list>  is a list of child flow names separated by spaces 
###        The idea is to facilitate modular and hierarchical scriptable tasks. 
###        Each flow can be called from emul_build_soc cmd line: --run_flow <flow_name>
###        Reserved FLOW KEYWORDS:INITIAL, FINAL and DEFAULT
###        FLOW INITIAL : Is run first and foremost, if enabled.
###        FLOW DEFAULT : Is run only when a run_stage is not specified trhu cmd line.
###        FLOW FINAL:  Is run at the end after all flows have finished running. 
###
### RUN followed by END_RUN 
###        Defines FLOW  control i.e. which FLOWS (defined earlier) should be run or not.   
###        FLOW <ENABLED | DISENABLED> 
###        By default, all FLOWS are disabled. FLOWS have to be explicitly ENABLED to run. 
###        Parent flows will not be run if it has a dependency on a child FLOW which has been disabled. 
###
### PARAMS followed by END_PARAMS  
###        Helps define parameters for tools
###        and for user's use in the batch scripts. This is case-sensitive.
###        When a PARAM is used anywhere outside this section, it is simply replaced by
###        its definition. 
###        These parameters can be overrided with value from cmd line: --params <KEY>=VALUE
###        Here's a list of PARAMS keywords reserved and utilized by the tool:
###        CMD_SHELL, EMAIL_TO,  WORK_AREA. 
###   
###
###        See below for a description of optional tool configuration parameters.
###
### WORK_AREA  <path1> <path2> ... <pathn> 
###        default: Current working dir. ACE creates a work area before calling this tool.
###        A selection policy: When multiple paths are provided, select the path with most space.
###        Use [ MIN_SPACE <n>  ]   where n is minimum space in GB is guaranteed. 
###           This helps pick the path with with most space but has atleast the min specified 
###           space, if not error out.
###        NEW_WORK_AREA  ON   Helps create new work area with WORK_AREA_TAG prefix and date_stamp. 
###           Otherwise use user provided existing work area path.
###
### EMAIL_TO <uid@domain, ..., uid2@domain2>
###        Default email generation is turned off.
###
###
### CMD_SHELL #!/usr/intel/bin/bash -xe   
###        Default shell is /bin/bash -e 
###        Allows user to override tool default (/bin/bash -e). -x provides verbose debug msgs
###
#######################################################################################################


#======================================================================================================
# Define Parameters for use by flows later in this file 
# These parameters can be overided from cmd line: --params <KEY>=<VALUE>. 
#======================================================================================================


PARAMS  
  EMUTOOLS  /nfs/site/eda/group/SYSNAME/emu/intel/
  EMUBUILD  /nfs/site/eda/group/SYSNAME/emu/intel/emubuild/0.6.0/bin/emubuild
  EMUCFG     $EMU_CFG_DIR/veloce/buildProject.pm
  TBXCFG     $EMU_CFG_DIR/veloce/tbx.config 
  ## TOP and METADATA values are provided by ACE
  METADATA  UNDEF  
  TOP       $TOP
  NPOOL    UNDEF 
  NQSLOT   UNDEF 
  NCLASS   UNDEF 
  PROJ      VLV

END_PARAMS


#======================================================================================================
# Flow Name: INITIAL  ("INITIAL" is a reserved Keyword)
# Description: The very first run_stage that sets up Environment and other pre-requsites 
#              for other flows. This runs for all flows. 
#======================================================================================================

FLOW INITIAL NONE
  # This flow is run first prior to all other flows. 
  # Other flows run if and only if this flow completes without error. 
  echo "Launching Flow: INITIAL. "
  echo "Running basic workspace/env setup procedure for FLOWs to follow." 
  echo "Current dir: " $PWD
  echo date > setup.env 
  echo $PWD  >> setup.env
  ls 
  sleep 20
  date 
  
END_FLOW


 
#======================================================================================================
# Flow Name: FINAL  ("FINAL" is a reserved Keyword)
# Description: This FLOW is run LAST after all FLOWS have finished.  
#======================================================================================================

FLOW FINAL NONE
   #source setup.env
   echo "Launching FLOW: FINAL"
   echo "Current dir: " $PWD
   sleep 20
   echo "Final stage has been run"  > final.txt
   date 
  
END_FLOW




#======================================================================================================
# Flow Name: DEFAULT ("DEFAULT" is a reserved Keyword)
# Description: This is set of default flows that are automatically run when emul_build_soc 
# is run without a --run_stage cmd line
# Default can be aliased to other flows that needs to be run automatically. 
# The purpose is to simplify usage for DE folks, who just run a bunch of checks enabled
# by emulation team.
#======================================================================================================

FLOW DEFAULT INITIAL CHECK_FPGA CHECK_LINT
   echo Launching FLOW: DEFAULT
   echo A "run_stage" is *not* specified thru cmd line arg. 
   echo Following flows have been enabled to run at this time: CHECK_LINT CHECK_FPGA
   sleep 20
   date 
   touch test
   ls -la 
   
END_FLOW



#======================================================================================================
# Flow Name: CHECK_GK
# Description: This FLOW is run from cmd line. Provides a simple way to alias many flows into
#     one cmd_line option. This simplifies for DE to run one cmd, which launches all the active 
#     checks enabled by project emulation team. This is the cmd used by GATEKEEPER turnin.
#======================================================================================================

FLOW CHECK_GK INITIAL CHECK_VELOCE CHECK_LINT CHECK_FPGA 
   echo Launching FLOW: CHECK_GK
   echo FOllowing flows have been enabled to run at this time: CHECK_VELOCE_GK CHECK_LINT CHECK_FPGA
END_FLOW




#======================================================================================================
# Flow Name: CHECK_VELOCE
# Description: Runs emulation checks for Mentor's Veloce platform
#======================================================================================================

FLOW CHECK_VELOCE INITIAL
   #source setup.env
   echo "Running.......... FLOW: CHECK_VELOCE "
   echo "Current dir: " $PWD
   mkdir -p CHECK_VELOCE
   cd CHECK_VELOCE
   if [ -e "tbx.config" ]; then
   cp TBXCFG .
   else
   echo " Cannot find tbx.config file in work_area \n"
   fi
   echo Calling Veloce Tools.....

END_FLOW


#======================================================================================================
# Flow Name: CHECK_ZSE
# Description: Runs emulation checks for Synopsys Zebu Server platform
#======================================================================================================

FLOW CHECK_ZSE INITIAL
   #source setup.env
   echo "Running.......... FLOW: CHECK_ZSE "
   echo "Current dir: " $PWD
   mkdir -p CHECK_ZSE
   cd CHECK_ZSE
   echo "Calling Zebu tools..." 

END_FLOW


#======================================================================================================
# Flow Name: CHECK_FPGA 
# Description: Runs FPGA checks. 
#======================================================================================================

FLOW CHECK_FPGA INITIAL 
   echo "Launching FLOW: CHECK_FPGA "
   #source setup.env
   echo "Current dir: " $PWD
   mkdir -p CHECK_FPGA
   cd CHECK_FPGA

END_FLOW




#======================================================================================================
# Flow Name: CHECK_LINT
# Description: Runs lint check using lintra rule deck for Emulation & FPGA
#======================================================================================================

FLOW CHECK_LINT INITIAL
   #source setup.env
   echo "Launching FLOW: CHECK_LINT "
   echo "Current dir: " $PWD
   mkdir -p CHECK_LINT
   cd CHECK_LINT

END_FLOW



#======================================================================================================
# Flow Name: BUILD_VELOCE_COMPACT
# Description: Runs lint check using lintra rule deck for Emulation & FPGA
#======================================================================================================

FLOW BUILD_VELOCE_COMPACT INITIAL
   source setup.env
   echo "Launching FLOW: BUILD_VELOCE_COMPACT"
   echo "Current dir: " $PWD
   mkdir -p BUILD_VELOCE_COMPACT
   cd BUILD_VELOCE_COMPACT 

END_FLOW


#======================================================================================================
# Flow Name: BUILD_VELOCE_HYBRID
# Description: Runs lint check using lintra rule deck for Emulation & FPGA
#======================================================================================================

FLOW BUILD_VELOCE_HYBRID INITIAL
   source setup.env
   echo "Launching FLOW: BUILD_VELOCE_HYBRID  "
   echo "Current dir: " $PWD
   mkdir -p BUILD_VELOCE_HYBRID 
   cd BUILD_VELOCE_HYBRID 
 
END_FLOW


#======================================================================================================
# Flow Name: BUILD_VELOCE_MODELS
# Description: Runs lint check using lintra rule deck for Emulation & FPGA
#======================================================================================================

FLOW BUILD_VELOCE_MODELS INITIAL BUILD_VELOCE_HYBRID BUILD_VELOCE_COMPACT
   source setup.env
   echo "Launching FLOW: BUILD_VELOCE_MODELS  "
   echo "Current dir: " $PWD
   sleep 30; 

END_FLOW




#======================================================================================================
# Flow Name: BUILD_FPGA
# Description: Runs lint check using lintra rule deck for Emulation & FPGA
#======================================================================================================

FLOW BUILD_FPGA INITIAL
   source setup.env
   echo "Launching FLOW: BUILD_FPGA  "
   echo "Current dir: " $PWD
   mkdir -p BUILD_FPGA 
   cd BUILD_FPGA 

END_FLOW






#======================================================================================================
# RUN CONTROL: option ENABLED or DISABLED
#     Only the flows ENABLED are allowed to run! 
#     By default all FLOWS are DISABLED if they are explicitly ENABLED/DISABLED in RUN block. 
#     Flows are run explicitly thru cmd line arg: --run_stage <flow_name>. 
#     Flows are also run when the parent flow has an explicit dependency on sub-flows. 
#     Flows are called to run explicitly or are run 
#     an explicit dependency specified for a parent flow.
#======================================================================================================

RUN
  
  INITIAL 	ENABLED
  DEFAULT       ENABLED
  FINAL         ENABLED
  CHECK_VELOCE  ENABLED
  CHECK_LINT    ENABLED
  CHECK_GK      ENABLED
  CHECK_FPGA    ENABLED
  CHECK_ZSE     DISABLED
  CHECK_FALSE   DISABLED
  BUILD_VELOCE_COMPACT    ENABLED
  BUILD_VELOCE_HYBRID     DISABLED
  BUILD_FPGA    ENABLED
  BUILD_VELOCE_MODELS   ENABLED

END_RUN

