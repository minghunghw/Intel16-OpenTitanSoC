#### emul_build_soc  setup template file ###
#######################################################################################################
### File : fpgabuild.cfg    Project: ACE Example prototype_2
### Description: 
###     This file provides the basic setup template required for emul_build_soc utility.
###     emul_build_soc is the unified front-end interface for all emulation/fpga build tasks.
###     The purpose of this file is to provide all project specific env in this file, so 
###     the emul_build_soc script remains project independent and portable.  
###     To obtain a template or to use one in use by other projects team, please visit the 
###     CoE SVN Repository. More information on this utility is provided in the CoE emulation 
###     community at http://goto/emulation
###     THIS FILE IS CUSTOMIZED BY PROJCT EMULATION TEAMS.
###
###
### Different Check and Build flows supported by this file: 
###      Use tool cmd:  "emul_build_soc --show_flow" 
###                      see a list of RTL Compliance checking flows currently supported by this file 
###       
###
### Following are reserved KEYWORDS in this utility: 
### CHECK <value>  Provides a simple ability to check for existence of dir, file or env var. 
###        The BATCH script exits if the CHECK fails. 
### 
###
### FLOW <flow_name_uniq_id> <dependency_list> followed by END_FLOW
###        Helps define a group of scriptable actions together. The content
###        inside a FLOW has to be an unix cmd (and/or CHECK directive) or a comment. 
###
###        <flow_name_uniq_id>  is a unique identifier for a flow name
###        <dependency_list>  is a list of child flow names separated by spaces 
###        The idea is to facilitate modular and hierarchical scriptable tasks. 
###        Each flow can be called from emul_build_soc cmd line: --run_stage <flow_name>
###        Reserved FLOW KEYWORDS:INITIAL, FINAL and DEFAULT
###        FLOW INITIAL : Is run first and foremost, if enabled.
###        FLOW DEFAULT : Is run only when a run_stage is not specified trhu cmd line.
###        FLOW FINAL:  Is run at the end after all flows have finished running. 
###
### RUN followed by END_RUN 
###        Defines FLOW  control i.e. which FLOWS (defined earlier) should be run or not.   
###        FLOW <ENABLED | DISENABLED> 
###        By default, all FLOWS are disabled. FLOWS have to be explicitly ENABLED to run. 
###        Parent flows will not be run if it has a dependency on a child FLOW which has been disabled. 
###
### PARAMS followed by END_PARAMS  
###        Helps define parameters for tools
###        and for user's use in the batch scripts. This is case-sensitive.
###        When a PARAM is used anywhere outside this section, it is simply replaced by
###        its definition. 
###        These parameters can be overrided with value from cmd line: --params <KEY>=VALUE
###        Here's a list of PARAMS keywords reserved and utilized by the tool:
###        CMD_SHELL, EMAIL_TO,  WORK_AREA. 
###   
###
###        See below for a description of optional tool configuration parameters.
###
### WORK_AREA  <path1> <path2> ... <pathn> 
###        default: Current working dir. ACE creates a work area before calling this tool.
###        A selection policy: When multiple paths are provided, select the path with most space.
###        Use [ MIN_SPACE <n>  ]   where n is minimum space in GB is guaranteed. 
###           This helps pick the path with with most space but has atleast the min specified 
###           space, if not error out.
###        NEW_WORK_AREA  ON   Helps create new work area with WORK_AREA_TAG prefix and date_stamp. 
###           Otherwise use user provided existing work area path.
###
### EMAIL_TO <uid@domain, ..., uid2@domain2>
###        Default email generation is turned off.
###
###
### CMD_SHELL #!/bin/bash -xe   
###        Default shell is /bin/bash -e 
###        Allows user to override tool default (/bin/bash -e). -x provides verbose debug msgs
###
#######################################################################################################


#======================================================================================================
# Define Parameters for use by flows later in this file 
# These parameters can be overided from cmd line: --params <KEY>=<VALUE>. 
#======================================================================================================

PARAMS
  #These env vars are now set in emulation.env:
  #EMUL_TOOLS_DIR, EMUL_CFG_DIR, EMUL_RESULTS_DIR  
  #### Tools used in this flow 
  EMUBUILD /nfs/site/eda/group/SYSNAME/emu/intel/emubuild/2.2.3/bin/emubuild
  PERL /usr/intel/bin/perl5.14.1-threads

  #### Env Files used in this flow
  EMUCFG     $EMUL_CFG_DIR/cfg/buildProjectCfg.yml
  TBXCFG     $EMUL_CFG_DIR/veloce/tbx.config 
  SUMMARY_LOG  $FPGA_RESULTS_DIR/BUILD_Results_Summary.log
  
  ## TOP and METADATA values are provided by ACE
  METADATA  $FPGA_META_DATA
  TOP       $TOP


END_PARAMS


#======================================================================================================
# Flow Name: INITIAL  ("INITIAL" is a reserved Keyword)
# Description: The very first run_stage that sets up Environment and other pre-requsites 
#              for other flows. This runs for all flows. 
#======================================================================================================

FLOW INITIAL NONE
  # This flow is run first prior to all other flows.
  # Other flows run if and only if this flow completes without error.
  echo "Launching Flow: INITIAL. "
  echo "Current dir: " $PWD
  echo "Check emulation env vars:" 
  env | grep EMUL
  echo "Check availability of required tools:"
  export WORKING_DIR=`pwd`
  #-------------------------------------------------------
  if [ -f "$SYNTH_META_DATA" ];
  then
  ## do something
  export FPGA_RESULTS_DIR=`dirname $SYNTH_META_DATA`
  export FPGA_META_DATA=`echo "$SYNTH_META_DATA"`
  elif [ -d "$EMUL_RESULTS_DIR" ];
  then
  ## do something
  if [ ! -e *.ace_metadata.pl ];
  then
  echo "No ACE metadata file was found in $EMUL_RESULTS_DIR"
  exit 1
  else
  LATEST_METADATA=$(ls -1t | grep '.*.ace_metadata.pl' | head -n 1)
  export FPGA_RESULTS_DIR=`echo "$EMUL_RESULTS_DIR"`
  export FPGA_META_DATA=`echo "$EMUL_RESULTS_DIR/$LATEST_METADATA"`
  fi
  else 
  ## do something
  echo "-E- You need to set EMUL_RESULTS_DIR if you are  not using Ace 2.01.31.01 or later" 
  fi
  #-------------------------------------------------------
  echo "echo Sourcing setup.env " > setup.env
  echo cd $PWD                                  >> setup.env
  echo "date"                                   >> setup.env
  chmod 770 setup.env
  #Create Summary Error Report files
  echo "Summary of ALL RTL Checks for FPGA/Emulation: " > SUMMARY_LOG
  CHECK METADATA  
END_FLOW

#======================================================================================================
# Flow Name: FINAL  ("FINAL" is a reserved Keyword)
# Description: This FLOW is run LAST after all FLOWS have finished.  
#======================================================================================================

FLOW FINAL NONE
   source scripts/INITIAL
   unset SYN_TCL_HOOKS
   echo Generating Error Summary
   echo ==================SUMMARY OF FPGA BUILD===========

   if [ -e "FPGABUILD_RESULTS/fpga_premier/emubuild_log_summary.log" ];
   then 
       echo "" >> SUMMARY_LOG
       echo "*********SUMMARY OF FPGA BUILD **********"  >> SUMMARY_LOG
       cat FPGABUILD_RESULTS/fpga_premier/emubuild_log_summary.log >> SUMMARY_LOG
   fi
   cat SUMMARY_LOG
   export PROJ_MONITOR_NAME="FPGA"
   ## disable diamond tracking during development. Turn on at product power-on.
   ## perl $EMUL_TOOLS_DIR/diamond_tracker.pl
END_FLOW
#======================================================================================================
# Flow Name: DEFAULT ("DEFAULT" is a reserved Keyword)
# Description: This is set of default flows that are automatically run when emul_build_soc 
# is run without a --run_stage cmd line
# Default can be aliased to other flows that needs to be run automatically. 
# The purpose is to simplify usage for DE folks, who just run a bunch of checks enabled
# by emulation team.
#======================================================================================================

FLOW DEFAULT INITIAL FPGA_FRONTEND FPGA_BACKEND
   echo "Running.......... FLOW: DEFAULT "
END_FLOW

FLOW FPGA_FULL_BUILD INITIAL FPGA_FRONTEND FPGA_BACKEND
   echo "Running.......... FLOW: FPGA_FULL_BUILD "
END_FLOW

#======================================================================================================
# Flow Name: FPGA_FRONTEND
# Description: Create project and library mapping files. Run compilation and synthesis
#======================================================================================================

FLOW FPGA_FRONTEND INITIAL
   source scripts/INITIAL
   echo "Running.......... FLOW: FPGA_FRONTEND "
   echo "Current dir: " $PWD
   export SYN_TCL_HOOKS=$EMUL_TOOLS_DIR/synhooks.tcl
   mkdir -p FPGABUILD_RESULTS
   cd FPGABUILD_RESULTS
   mkdir -p projects
   ln -sf $EMUL_CFG_DIR/fpga 
   ln -sf $EMUL_CFG_DIR/cfg
   ln -sf METADATA ACE_METAFILE
   ln -sf $EMUL_CFG_DIR/fpga_defines.f 
   echo Calling EMUBUILD for FPGA....
   EMUBUILD -m . -cfg ACTIVE_FPGA_CFG -cfg- -plugins $EMUL_CFG_DIR/plugins -plugins- -compile_substages fe -compile_substages- -top TOP -clean_target -no_parallel
   export PROJ_MONITOR_NAME="FPGABUILD"
   PERL $EMUL_TOOLS_DIR/diamond_tracker.pl tutorial   
END_FLOW
#======================================================================================================

#======================================================================================================
# Flow Name: FPGA_BACKEND
# Description: Run place and route and generate bitstream
#======================================================================================================

FLOW FPGA_BACKEND INITIAL
   source scripts/INITIAL
   if [ -z "$XILINXD_LICENSE_FILE" ];
   then
   echo "Xilinx license file (XILINXD_LICENSE_FILE) isn't set."
   echo "Please, re-run the flow after setting up Xilinx licenses in your environment. Note that this flow requires a Vivado license."
   exit 1
   fi
   if [ -d "./FPGABUILD_RESULTS" ];
   then
   mkdir -p FPGABUILD_RESULTS
   cd FPGABUILD_RESULTS
   else
   echo FPGABUILD_RESULTS directory does not exist. 
   echo Please, make sure that FPGA_FRONTEND was completed successfully
   exit 1
   fi
   echo "Running.......... FLOW: FPGA_BACKEND "
   echo "Current dir: " $PWD
   mkdir -p projects   
   ln -sf $EMUL_CFG_DIR/fpga 
   ln -sf $EMUL_CFG_DIR/cfg
   ln -sf METADATA ACE_METAFILE
   ln -sf $EMUL_CFG_DIR/fpga_defines.f 
   echo Calling EMUBUILD for FPGA....
   EMUBUILD -m . -cfg ACTIVE_FPGA_CFG -cfg- -plugins $EMUL_CFG_DIR/plugins -plugins- -s all +s emubuild.ACTIVE_FPGA_CFG_execute_compile -compile_substages be -compile_substages- -top TOP -no_parallel 
END_FLOW

#======================================================================================================
# Flow Name: FPGA_E2E
# Description: Run place and route and generate bitstream
#======================================================================================================

FLOW FPGA_E2E INITIAL
   source scripts/INITIAL
   mkdir -p FPGABUILD_RESULTS
   cd FPGABUILD_RESULTS
   echo "Running.......... FLOW: FPGA_E2E "
   echo "Current dir: " $PWD
   mkdir -p projects
   ln -sf $EMUL_CFG_DIR/fpga
   ln -sf $EMUL_CFG_DIR/cfg
   ln -sf METADATA ACE_METAFILE
   ln -sf $EMUL_CFG_DIR/fpga_defines.f
   echo Calling EMUBUILD for FPGA....
   EMUBUILD -m . -cfg ACTIVE_FPGA_CFG -cfg- -plugins $EMUL_CFG_DIR/plugins -plugins- -top TOP -no_parallel
   if [ "$TOP" != "cpu_lib.cpu" ];
   then
   export PROJ_MONITOR_NAME="FPGABUILD"
   PERL $EMUL_TOOLS_DIR/diamond_tracker.pl e2e
   fi
END_FLOW


#======================================================================================================
# RUN CONTROL: option ENABLED or DISABLED
#     Only the flows ENABLED are allowed to run! 
#     By default all FLOWS are DISABLED if they are explicitly ENABLED/DISABLED in RUN block. 
#     Flows are run explicitly thru cmd line arg: --run_stage <flow_name>. 
#     Flows are also run when the parent flow has an explicit dependency on sub-flows. 
#     Flows are called to run explicitly or are run 
#     an explicit dependency specified for a parent flow.
#======================================================================================================

RUN
  
  INITIAL   ENABLED
  DEFAULT   ENABLED
  FINAL     ENABLED
  FPGA_FRONTEND   ENABLED
  FPGA_BACKEND   ENABLED
  FPGA_E2E ENABLED
  FPGA_FULL_BUILD

END_RUN

