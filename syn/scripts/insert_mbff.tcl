############################################################
########## Multibit Flow Setup
############################################################

# Defining Path Groups
#   For multibit banking to work, path groups must be defined
#    from a register cell to register cell, rather than from
#    clock pin to cell/pin.
#   If path groups are defined from a register clock pin,
#    you will see Error code PSYN-1229 and no registers will
#    be banked
#
# group_path -name REG2REG -from [all_registers] -to [all_registers]

# Set the current scenario to a critical setup time scenario


############################################################
########## Mutibit Timing Aware Flop Selection
############################################################
if {[info exists INTEL_INSERT_MBFF] && $INTEL_INSERT_MBFF == "1" && [info exists INTEL_TIMING_AWARE_BANKING_THRESHOLD] && $INTEL_TIMING_AWARE_BANKING_THRESHOLD != ""} {
  set dont_bank_reg {}
  set all_std_cell_regs [filter_collection [all_registers ] "!defined(is_hard_macro) || is_hard_macro==false"]
  set reg_out_pins [get_pins -of $all_std_cell_regs -filter "direction==out && defined(worst_slack)"]
  set filtered_out_pins [filter_collection $reg_out_pins "worst_slack < $INTEL_TIMING_AWARE_BANKING_THRESHOLD"]
  set critical_timing_regs [get_cells -of $filtered_out_pins -quiet]
  # Exclude timing critical flops from MBFF banking
  append_to_collection dont_bank_reg -unique $critical_timing_regs

  set num_excluded_regs [sizeof_collection $critical_timing_regs]
  if {$num_excluded_regs > 0} {
    P_msg_info "Excluding $num_excluded_regs regs from multibit banking"
    ### set exclude_regs_option {-exclude_instance $critical_timing_regs}
  } else {
    P_msg_info "No regs are below slack threshold in timing aware banking"
  }


  # Cache the previous dont_touch state before modifying
  set dont_bank_reg_orig [dict create]
  if {[sizeof_collection $dont_bank_reg]} {
    foreach_in_collection reg $dont_bank_reg {
      set dt [get_attribute $reg dont_touch -return_null_values -quiet]
      dict set dont_bank_reg_orig [get_object_name $reg] $dt
      if {$dt == {}} {
        dict set dont_bank_reg_orig [get_object_name $reg] false
      }
    }
    set_dont_touch $dont_bank_reg true
  }

  ############################################################
  ########## Multibit Execution
  ############################################################
  # Script that contains commands to bank flops
  #   Generated by flow in identify_register_banks command
  #   Location to save script
  set INTEL_REG_BANK_SCRIPT "./.create_register_bank.tcl"


  set cmd "identify_register_banks -output_file $INTEL_REG_BANK_SCRIPT"
  P_msg_info "Running command: $cmd"
  eval $cmd

  if {[file exists $INTEL_REG_BANK_SCRIPT]} {
    P_msg_info " Sourcing register banking script: $INTEL_REG_BANK_SCRIPT"
    source $INTEL_REG_BANK_SCRIPT
  }

  # Restore dont_touch attribute to its original state
  dict for {regname orig} $dont_bank_reg_orig {
    set_dont_touch [get_cells $regname] $orig
  }
} else {
  P_msg_info "INTEL_MBFF variable is not set hence not mapping multi-bit flops"
}
