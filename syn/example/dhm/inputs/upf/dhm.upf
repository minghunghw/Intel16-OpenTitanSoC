
if { ![info exists synopsys_program_name] || [info exists synopsys_program_name] && $synopsys_program_name == {pt_shell} } {
  upf_version 1.0
}

########
# Power Domains
# Domains pd_core0, pd_core1 & pd_core2 are self-scoped, whereas pd_core2_conv8, pd_core2_conv64 & pd_sleep1 are parent-scoped.

create_power_domain pd_dhm

create_power_domain pd_core0 -scope u_dhm_unit_0/u_dhm_core

create_power_domain pd_core1 -scope u_dhm_unit_1/u_dhm_core

create_power_domain pd_core2 -scope u_dhm_unit_2/u_dhm_core

create_power_domain pd_core2_conv8 -scope u_dhm_unit_2/u_dhm_core -elements {u_dhm_unit_2/u_dhm_core/u_convert_8_64}

create_power_domain pd_core2_conv64 -scope u_dhm_unit_2/u_dhm_core -elements {u_dhm_unit_2/u_dhm_core/u_convert_64_8}

create_power_domain pd_sleep1 -elements {u_dhm_unit_1/u_dhm_bypass/u_dhm_sleep_logic}

########
# Supply Ports & Supply Nets

####
# vcc always-on supply
create_supply_port vcc -domain pd_dhm
create_supply_net vcc -domain pd_dhm

create_supply_port vcc -domain u_dhm_unit_0/u_dhm_core/pd_core0
create_supply_net vcc -domain u_dhm_unit_0/u_dhm_core/pd_core0

create_supply_port vcc -domain u_dhm_unit_1/u_dhm_core/pd_core1
create_supply_net vcc -domain u_dhm_unit_1/u_dhm_core/pd_core1

create_supply_port vcc -domain u_dhm_unit_2/u_dhm_core/pd_core2
create_supply_net vcc -domain u_dhm_unit_2/u_dhm_core/pd_core2

#create_supply_net vcc -domain u_dhm_unit_2/u_dhm_core/pd_core2_conv8 -reuse

#create_supply_net vcc -domain u_dhm_unit_2/u_dhm_core/pd_core2_conv64 -reuse

create_supply_net vcc -domain pd_sleep1 -reuse

connect_supply_net vcc -ports {
  vcc
  u_dhm_unit_0/u_dhm_core/vcc
  u_dhm_unit_1/u_dhm_core/vcc
  u_dhm_unit_2/u_dhm_core/vcc
}

set_scope 

set_scope u_dhm_unit_0/u_dhm_core

connect_supply_net vcc -ports {vcc}

set_scope

set_scope u_dhm_unit_1/u_dhm_core


connect_supply_net vcc -ports {vcc}

set_scope

set_scope u_dhm_unit_2/u_dhm_core

connect_supply_net vcc -ports {vcc}

set_scope

####
# vcc_sw0 switchable supply
create_supply_net vcc_sw0 -domain u_dhm_unit_0/u_dhm_core/pd_core0 -resolve parallel

####
# vccL always-on supply
create_supply_port vccL -domain pd_dhm
create_supply_net vccL -domain pd_dhm

create_supply_port vccL -domain u_dhm_unit_1/u_dhm_core/pd_core1
create_supply_net vccL -domain u_dhm_unit_1/u_dhm_core/pd_core1

create_supply_port vccL -domain u_dhm_unit_2/u_dhm_core/pd_core2
create_supply_net vccL -domain u_dhm_unit_2/u_dhm_core/pd_core2

create_supply_net vccL -domain u_dhm_unit_2/u_dhm_core/pd_core2_conv8 -reuse

create_supply_net vccL -domain u_dhm_unit_2/u_dhm_core/pd_core2_conv64 -reuse

create_supply_net vccL -domain pd_sleep1 -reuse

connect_supply_net vccL -ports {
  vccL
  u_dhm_unit_1/u_dhm_core/vccL
  u_dhm_unit_2/u_dhm_core/vccL
}

set_scope

set_scope u_dhm_unit_1/u_dhm_core 

connect_supply_net vccL -ports {vccL}

set_scope

set_scope u_dhm_unit_2/u_dhm_core 


connect_supply_net vccL -ports {vccL}



set_scope

#connect_supply_net u_dhm_unit_1/u_dhm_core/vccL -ports {u_dhm_unit_1/u_dhm_core/vccL}
#
#connect_supply_net u_dhm_unit_2/u_dhm_core/vccL -ports {u_dhm_unit_2/u_dhm_core/vccL}

####
# vccL_sw1 switchable supply
create_supply_net vccL_sw1 -domain u_dhm_unit_1/u_dhm_core/pd_core1

####
# vccL_sw2 switchable supply
create_supply_net vccL_sw2 -domain u_dhm_unit_2/u_dhm_core/pd_core2_conv8 -resolve parallel
create_supply_net vccL_sw3 -domain u_dhm_unit_2/u_dhm_core/pd_core2_conv64 -resolve parallel

####
# vss always-on supply
create_supply_port vss -domain pd_dhm
create_supply_net vss -domain pd_dhm

create_supply_port vss -domain u_dhm_unit_0/u_dhm_core/pd_core0
create_supply_net vss -domain u_dhm_unit_0/u_dhm_core/pd_core0

create_supply_port vss -domain u_dhm_unit_1/u_dhm_core/pd_core1
create_supply_net vss -domain u_dhm_unit_1/u_dhm_core/pd_core1

create_supply_port vss -domain u_dhm_unit_2/u_dhm_core/pd_core2
create_supply_net vss -domain u_dhm_unit_2/u_dhm_core/pd_core2

create_supply_net vss -domain u_dhm_unit_2/u_dhm_core/pd_core2_conv8 -reuse

create_supply_net vss -domain u_dhm_unit_2/u_dhm_core/pd_core2_conv64 -reuse

create_supply_net vss -domain pd_sleep1 -reuse

connect_supply_net vss -ports {
  vss
  u_dhm_unit_0/u_dhm_core/vss
  u_dhm_unit_1/u_dhm_core/vss
  u_dhm_unit_2/u_dhm_core/vss
}

set_scope

set_scope u_dhm_unit_0/u_dhm_core

connect_supply_net vss -ports {vss}

set_scope

set_scope u_dhm_unit_1/u_dhm_core


connect_supply_net vss -ports {vss}

set_scope

set_scope u_dhm_unit_2/u_dhm_core

connect_supply_net vss -ports {vss}

set_scope



#connect_supply_net u_dhm_unit_0/u_dhm_core/vss -ports {u_dhm_unit_0/u_dhm_core/vss}
#
#connect_supply_net u_dhm_unit_1/u_dhm_core/vss -ports {u_dhm_unit_1/u_dhm_core/vss}
#
#connect_supply_net u_dhm_unit_2/u_dhm_core/vss -ports {u_dhm_unit_2/u_dhm_core/vss}

########
# Primary Power and Ground Supplies

set_domain_supply_net pd_dhm -primary_power_net vcc -primary_ground_net vss

set_domain_supply_net u_dhm_unit_0/u_dhm_core/pd_core0 -primary_power_net u_dhm_unit_0/u_dhm_core/vcc_sw0 -primary_ground_net u_dhm_unit_0/u_dhm_core/vss

set_domain_supply_net u_dhm_unit_1/u_dhm_core/pd_core1 -primary_power_net u_dhm_unit_1/u_dhm_core/vccL_sw1 -primary_ground_net u_dhm_unit_1/u_dhm_core/vss

set_domain_supply_net u_dhm_unit_2/u_dhm_core/pd_core2 -primary_power_net u_dhm_unit_2/u_dhm_core/vccL -primary_ground_net u_dhm_unit_2/u_dhm_core/vss

set_domain_supply_net u_dhm_unit_2/u_dhm_core/pd_core2_conv8 -primary_power_net u_dhm_unit_2/u_dhm_core/vccL_sw2 -primary_ground_net u_dhm_unit_2/u_dhm_core/vss

set_domain_supply_net u_dhm_unit_2/u_dhm_core/pd_core2_conv64 -primary_power_net u_dhm_unit_2/u_dhm_core/vccL_sw3 -primary_ground_net u_dhm_unit_2/u_dhm_core/vss

set_domain_supply_net pd_sleep1 -primary_power_net vccL -primary_ground_net vss

########
# Power Switches
# Nets sleep[*] are active-high for off (active-low for on), whereas nets sleep_n[*] are active-low for off (active-high for on).

# Switches sw_core0_0 & sw_core0_1 are parallel switches in same pd_core0 domain.
create_power_switch sw_core0_0 -domain u_dhm_unit_0/u_dhm_core/pd_core0 \
  -input_supply_port {in u_dhm_unit_0/u_dhm_core/vcc} \
  -output_supply_port {out u_dhm_unit_0/u_dhm_core/vcc_sw0} \
  -control_port {ctrl0 u_dhm_unit_0/u_dhm_core/sleep} \
  -ack_port {ack0 u_dhm_unit_0/u_dhm_core/sleep_ack} \
  -on_state {on in { !ctrl0 }}

#Alvin: multiple inputs PS is not yet available for 1275 tall library as of now -> back to 1 input strategy 
# Switch sw_core1 is single switch with multiple inputs.
#create_power_switch sw_core1 -domain u_dhm_unit_1/u_dhm_core/pd_core1 \
#  -input_supply_port {in u_dhm_unit_1/u_dhm_core/vccL} \
#  -output_supply_port {out u_dhm_unit_1/u_dhm_core/vccL_sw1} \
#  -control_port {ctrl0 u_dhm_unit_1/u_dhm_core/sleep} \
#  -control_port {ctrl1 u_dhm_unit_1/u_dhm_core/sleep_n[1]} \
#  -ack_port {ack0 u_dhm_unit_1/u_dhm_core/sleep_ack[0]} \
#  -ack_port {ack1 u_dhm_unit_1/u_dhm_core/sleep_ack[1]} \
#  -on_state {on in { !ctrl0 | ctrl1 }}
create_power_switch sw_core1 -domain u_dhm_unit_1/u_dhm_core/pd_core1 \
  -input_supply_port {in u_dhm_unit_1/u_dhm_core/vccL} \
  -output_supply_port {out u_dhm_unit_1/u_dhm_core/vccL_sw1} \
  -control_port {ctrl0 u_dhm_unit_1/u_dhm_core/sleep} \
  -ack_port {ack0 u_dhm_unit_1/u_dhm_core/sleep_ack} \
  -on_state {on in { !ctrl0 }}

# Switches sw_core2_conv8 & sw_core2_conv64 are separate switches in pd_core2_conv8 & pd_core2_conv64 domains respectively, but sharing same switchable output supply & control input.
create_power_switch sw_core2_conv8 -domain u_dhm_unit_2/u_dhm_core/pd_core2_conv8 \
  -input_supply_port {in u_dhm_unit_2/u_dhm_core/vccL} \
  -output_supply_port {out u_dhm_unit_2/u_dhm_core/vccL_sw2} \
  -control_port {ctrl u_dhm_unit_2/u_dhm_core/sleep} \
  -ack_port {ack u_dhm_unit_2/u_dhm_core/sleep_ack} \
  -on_state {on in { !ctrl }}

create_power_switch sw_core2_conv64 -domain u_dhm_unit_2/u_dhm_core/pd_core2_conv64 \
  -input_supply_port {in u_dhm_unit_2/u_dhm_core/vccL} \
  -output_supply_port {out u_dhm_unit_2/u_dhm_core/vccL_sw3} \
  -control_port {ctrl u_dhm_unit_2/u_dhm_core/sleep_n} \
  -ack_port {ack u_dhm_unit_2/u_dhm_core/sleep_ack} \
  -on_state {on in { ctrl }}

########
# Isolations
# Net pd_iso is active-high for isolation (active-low for normal), whereas net pd_iso_n is active-low for isolation (active-high for normal).
# Option -location is not critical because the mapped isolation cell supply is outside SCMR (dual-rail style).

set_isolation iso_core0_out -domain u_dhm_unit_0/u_dhm_core/pd_core0 -isolation_power_net u_dhm_unit_0/u_dhm_core/vcc -applies_to outputs -clamp_value 1
set_isolation_control iso_core0_out -domain u_dhm_unit_0/u_dhm_core/pd_core0 -isolation_signal u_dhm_unit_0/pd_iso -isolation_sense high -location self

# Outputs sleep_ack[*] are acknowledge outputs of switches sw_core0_0 & sw_core0_1, which must be always-on.
set_isolation iso_core0_out_no -domain u_dhm_unit_0/u_dhm_core/pd_core0 -no_isolation -elements {u_dhm_unit_0/u_dhm_core/sleep_ack u_dhm_unit_0/u_dhm_core/sleep_ack}

set_isolation iso_core1_out -domain u_dhm_unit_1/u_dhm_core/pd_core1 -isolation_power_net vcc -applies_to outputs -clamp_value 0
set_isolation_control iso_core1_out -domain u_dhm_unit_1/u_dhm_core/pd_core1 -isolation_signal u_dhm_unit_1/pd_iso -isolation_sense high -location parent

# Outputs sleep_ack[*] are acknowledge outputs of switch sw_core1, which must be always-on.
set_isolation iso_core1_out_no -domain u_dhm_unit_1/u_dhm_core/pd_core1 -no_isolation -elements {u_dhm_unit_1/u_dhm_core/sleep_ack u_dhm_unit_1/u_dhm_core/sleep_ack}

set_isolation iso_core2_conv8_out -domain u_dhm_unit_2/u_dhm_core/pd_core2_conv8 -isolation_power_net u_dhm_unit_2/u_dhm_core/vccL -applies_to outputs -clamp_value 1
set_isolation_control iso_core2_conv8_out -domain u_dhm_unit_2/u_dhm_core/pd_core2_conv8 -isolation_signal u_dhm_unit_2/pd_iso -isolation_sense high -location self

# Outputs o_tval & o_data[*] of domain pd_core2_conv8 directly drive only inputs i_rval & i_data[*] of domain pd_core2_conv64, which don't need to be isolated because both domains switch simultaneously.
set_isolation iso_core2_conv8_out_no -domain u_dhm_unit_2/u_dhm_core/pd_core2_conv8 -no_isolation -elements {u_dhm_unit_2/u_dhm_core/u_convert_8_64/o_tval u_dhm_unit_2/u_dhm_core/u_convert_8_64/o_data[*]}

set_isolation iso_core2_conv64_out -domain u_dhm_unit_2/u_dhm_core/pd_core2_conv64 -isolation_power_net u_dhm_unit_2/u_dhm_core/vccL -applies_to outputs -clamp_value 0
set_isolation_control iso_core2_conv64_out -domain u_dhm_unit_2/u_dhm_core/pd_core2_conv64 -isolation_signal u_dhm_unit_2/pd_iso -isolation_sense high -location self

# Output o_rrdy of domain pd_core2_conv64 directly drive only input i_trdy of domain pd_core2_conv8, which doesn't need to be isolated because both domains switch simultaneously.
set_isolation iso_core2_conv64_out_no -domain u_dhm_unit_2/u_dhm_core/pd_core2_conv64 -no_isolation -elements {u_dhm_unit_2/u_dhm_core/u_convert_64_8/o_rrdy}

########
# Level Shifters
# Option -location is not critical because the mapped level-shifter cell input & output supplies are both outside SCMR.
# NOTE: DC won't added level-shifters for inputs sleep[*] & sleep_n[*] and outputs sleep_ack[*] because they are floating in RTL.

set_level_shifter ls_core1_in -domain u_dhm_unit_1/u_dhm_core/pd_core1 -applies_to inputs -location self

# Skip for inputs sleep[*] & sleep_n[*] of domain pd_core1 since they are directly driven by outputs sleep[*] & sleep_n[*] of domain pd_sleep1, but may cause always-on buffers added in domain pd_dhm if needed.
#set_level_shifter ls_core1_in_no -domain u_dhm_unit_1/u_dhm_core/pd_core1 -no_shift -elements {u_dhm_unit_1/u_core/sleep[*] u_dhm_unit_1/u_dhm_core/sleep_n[*]}

# Locations of level-shifter ls_core1_out & isolation iso_core1_out must match to map to enable level-shifter (ELS) cell.
set_level_shifter ls_core1_out -domain u_dhm_unit_1/u_dhm_core/pd_core1 -applies_to outputs -location parent

# Skip for outputs sleep_ack[*] domain pd_core1 since they directly drive inputs sleep_ack[*] of domain pd_sleep1, but may cause always-on buffers added in domain pd_dhm if needed.
#set_level_shifter ls_core1_out_no -domain u_dhm_unit_1/u_dhm_core/pd_core1 -no_shift -elements {u_dhm_unit_1/u_core/sleep_ack[*]}

# Need to force for inputs sleep[*] & sleep_n[*] of domain pd_core2 after power switch cells are added in floorplan.
#set_level_shifter ls_core2_in -domain u_dhm_unit_2/u_dhm_core/pd_core2 -applies_to inputs -location parent
set_level_shifter ls_core2_in -domain u_dhm_unit_2/u_dhm_core/pd_core2 -applies_to inputs -location self

# Need to force for outputs sleep_ack[*] of domain pd_core2 after power switch cells are added in floorplan.
#set_level_shifter ls_core2_out -domain u_dhm_unit_2/u_dhm_core/pd_core2 -applies_to outputs -location self
set_level_shifter ls_core2_out -domain u_dhm_unit_2/u_dhm_core/pd_core2 -applies_to outputs -location parent

set_level_shifter ls_sleep1_in -domain pd_sleep1 -applies_to inputs -location self

# Skip for inputs sleep_ack[*] of domain pd_sleep1 since they are directly driven by outputs sleep_ack[*] of domain pd_core1, but may cause always-on buffers added in domain pd_dhm if needed.
#set_level_shifter ls_sleep1_in_no -domain pd_sleep1 -no_shift -elements {u_dhm_unit_1/u_dhm_bypass/u_dhm_sleep_logic/sleep_ack[*]}

set_level_shifter ls_sleep1_out -domain pd_sleep1 -applies_to outputs -location self

# Skip for outputs sleep[*] & sleep_n[*] of domain pd_sleep1 since they directly drive inputs sleep[*] & sleep_n[*] of domain pd_core1, but may cause always-on buffers added in domain pd_dhm if needed.
#set_level_shifter ls_sleep1_out_no -domain pd_sleep1 -no_shift -elements {u_dhm_unit_1/u_dhm_bypass/u_dhm_sleep_logic/sleep[*] u_dhm_unit_1/u_dhm_bypass/u_dhm_sleep_logic/sleep_n[*]}

##########Alvin adding this part
### Retention Flops 
##
##set_retention ret_core0 -domain u_dhm_unit_0/u_dhm_core/pd_core0 -retention_power_net u_dhm_unit_0/u_dhm_core/vcc 
##set_retention_control ret_core0 -domain u_dhm_unit_0/u_dhm_core/pd_core0 -save_signal {u_dhm_unit_0/pd_iso high} -restore_signal {u_dhm_unit_0/pd_iso low}
##map_retention_cell ret_core0 -domain u_dhm_unit_0/u_dhm_core/pd_core0 -lib_cell_type RET_SCAN_FLOP_RESET
##
#######e
# Power State Table
# Voltages of port states must match those of operating conditions in libraries.
# Legend: Rv = regular voltage, Lv = low voltage, Wc = worst case opcond, Bc = best case opcond.

add_port_state vcc -state {Rv_Wc 0.765} -state {Rv_Bc 0.765}

add_port_state vccL -state {Lv_Wc 0.765} -state {Lv_Bc 0.765}

add_port_state vss -state {Gnd 0.0}

add_port_state u_dhm_unit_0/u_dhm_core/sw_core0_0/out -state {Off off} -state {Rv_Wc 0.765} -state {Rv_Bc 0.765}
#add_port_state u_dhm_unit_0/u_dhm_core/sw_core0_1/out -state {Off off} -state {Rv_Wc 0.85} -state {Rv_Bc 1.025}

add_port_state u_dhm_unit_1/u_dhm_core/sw_core1/out -state {Off off} -state {Lv_Wc 0.765} -state {Lv_Bc 0.765}

add_port_state u_dhm_unit_2/u_dhm_core/sw_core2_conv8/out -state {Off off} -state {Lv_Wc 0.765} -state {Lv_Bc 0.765}
add_port_state u_dhm_unit_2/u_dhm_core/sw_core2_conv64/out -state {Off off} -state {Lv_Wc 0.765} -state {Lv_Bc 0.765}

create_pst pst_dhm -supplies {
  vcc
  vccL
  vss
  u_dhm_unit_0/u_dhm_core/sw_core0_0/out
  u_dhm_unit_1/u_dhm_core/sw_core1/out
  u_dhm_unit_2/u_dhm_core/sw_core2_conv8/out
  u_dhm_unit_2/u_dhm_core/sw_core2_conv64/out
}

add_pst_state stt_all_off_wc        -pst pst_dhm -state { Rv_Wc Lv_Wc Gnd Off   Off   Off   Off   }
add_pst_state stt_core0_on_wc       -pst pst_dhm -state { Rv_Wc Lv_Wc Gnd Rv_Wc Off   Off   Off   }
add_pst_state stt_core1_on_wc       -pst pst_dhm -state { Rv_Wc Lv_Wc Gnd Off   Lv_Wc Off   Off   }
add_pst_state stt_core2_conv_on_wc  -pst pst_dhm -state { Rv_Wc Lv_Wc Gnd Off   Off   Lv_Wc Lv_Wc }
add_pst_state stt_core0_off_wc      -pst pst_dhm -state { Rv_Wc Lv_Wc Gnd Off   Lv_Wc Lv_Wc Lv_Wc }
add_pst_state stt_core1_off_wc      -pst pst_dhm -state { Rv_Wc Lv_Wc Gnd Rv_Wc Off   Lv_Wc Lv_Wc }
add_pst_state stt_core2_conv_off_wc -pst pst_dhm -state { Rv_Wc Lv_Wc Gnd Rv_Wc Lv_Wc Off   Off   }
add_pst_state stt_all_on_wc         -pst pst_dhm -state { Rv_Wc Lv_Wc Gnd Rv_Wc Lv_Wc Lv_Wc Lv_Wc }

add_pst_state stt_all_off_bc        -pst pst_dhm -state { Rv_Bc Lv_Bc Gnd Off   Off   Off   Off   }
add_pst_state stt_core0_on_bc       -pst pst_dhm -state { Rv_Bc Lv_Bc Gnd Rv_Bc Off   Off   Off   }
add_pst_state stt_core1_on_bc       -pst pst_dhm -state { Rv_Bc Lv_Bc Gnd Off   Lv_Bc Off   Off   }
add_pst_state stt_core2_conv_on_bc  -pst pst_dhm -state { Rv_Bc Lv_Bc Gnd Off   Off   Lv_Bc Lv_Bc }
add_pst_state stt_core0_off_bc      -pst pst_dhm -state { Rv_Bc Lv_Bc Gnd Off   Lv_Bc Lv_Bc Lv_Bc }
add_pst_state stt_core1_off_bc      -pst pst_dhm -state { Rv_Bc Lv_Bc Gnd Rv_Bc Off   Lv_Bc Lv_Bc }
add_pst_state stt_core2_conv_off_bc -pst pst_dhm -state { Rv_Bc Lv_Bc Gnd Rv_Bc Lv_Bc Off   Off   }
add_pst_state stt_all_on_bc         -pst pst_dhm -state { Rv_Bc Lv_Bc Gnd Rv_Bc Lv_Bc Lv_Bc Lv_Bc }

########
# I/O Port Related Supplies

if { [info exists upf_extension] && $upf_extension } {
  #set_related_supply_net -power vcc -object_list {$input_ports $output_ports}
}

## --------------------------------------------------------------------------
## End of file
## --------------------------------------------------------------------------
